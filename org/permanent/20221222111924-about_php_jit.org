:PROPERTIES:
:ID:       C81D01DB-6135-46CD-B491-F35F42002417
:mtime:    20230115151905 20230115141644 20221222112051
:ctime:    20221222111924
:END:

#+TITLE: PHP8から追加されたJITについて学ぼう!
#+DESCRIPTION: PHPのJITについて書く
#+DATE: 2022-12-22
#+HUGO_BASE_DIR: ../../
#+HUGO_SECTION: posts/permanent
#+HUGO_TAGS: permanent
#+HUGO_DRAFT: true
#+STARTUP: content
#+STARTUP: nohideblocks

* はじめに

2023年現在、PHPは世界中の企業で使われており、最も成功しているプログラミング言語の1つと言っても過言ではないくらい開発者から愛されています。
WikipediaやWordPressもPHP製のプロダクトなので、開発者でなくてもPHPの恩恵を受けている人は多いでしょう。

私も5年以上PHPを用いて開発していますが、日進月歩で進化し続けるPHPにワクワクさせられています。

PHP 8.0が2020年11月にリリースされ、様々な便利な新機能が追加されました。
特に =Match式= は複雑な条件分岐を「式」で書くことができ、より柔軟な記述が可能になります。

高く評価されている新機能の1つに =JIT (ジャストインタイム) コンパイラ= があります。
JITを正しく使うと、条件によってはアプリケーションの1.5倍以上高速化できるということを公式のリリースページに書いてあります。

そもそもJITとは何か、PHP上でどのようにJITが動作しているのかを知れば、アプリケーションの記述を変えずに高速化できるでしょう。

* JITについて

JIT自体の歴史は長く、様々な言語の処理系で実装されています。
JavaScriptの処理系であるV8 EngineもJITを導入することによって大幅な高速化を実現しました。

Ruby 3.1でYJITが導入されました。
YJITはShopify社製のJIT Compilerで、同社はRailsアプリケーションが =20%~40%= 程度高速化できたという報告をしています。

PHP、Ruby、JavaScriptのような動的型付け言語は、CやRustのような静的型付け言語よりも実行速度が遅いです。
遅い理由は様ありますが、実行時に字句解析、構文解析、コンパイルをして中間コードを吐き出し、VM上で実行をしているのが原因です。
変数や関数の型情報の多くは実行時に決まり、実行時にVM上で最適化が走るので、どうしても遲くなってしまいます。

高速に実行するアプローチの1つにJIT Compileがあります。
JIT Compileは実行時にマシンコードを吐き出し、キャッシュ上に乗せ、再度実行する時にキャッシュ上のマシンコードを実行するというアプローチです。
マシンコードにすることによって、中間コードにわざわざ変換をしてVM上で変換をする必要がないので高速に動かすことができます。

JITの対比として、C言語のような事前にコンパイルする通常の手法はAOT(Ahead-Of-Time)コンパイルと呼びます。

* インストール方法

=php.ini= の =OPCache= の周りの設定を入れる。

* Tracing JITとFunction JITについて
** Tracing JITとは

仕組みを書く。

** Function JITとは

仕組みを書く。

* 終わりに

貴方が関わってるPHPプロジェクトでJITを有効にし、高速化してみては如何でしょうか？

* 参考記事

- [[https://shopify.engineering/yjit-just-in-time-compiler-cruby][YJIT: Building a New JIT Compiler for CRuby]]
- [[https://php.watch/articles/jit-in-depth][PHP JIT in Depth]]
- [[https://www.slideshare.net/y-uti/jit-70023246][JIT のコードを読んでみた]]
