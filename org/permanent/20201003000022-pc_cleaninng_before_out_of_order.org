:PROPERTIES:
:ID:       956CE9ED-E8B4-43CB-86A7-E64076221DAF
:mtime:    20231203232925
:ctime:    20221215030629
:END:
#+TITLE: MacBookProの生前整理をする
#+AUTHOR: takeokunn
#+DESCRIPTION: MacBookProの生前整理をする
#+DATE: 2020-10-03
#+HUGO_BASE_DIR: ../../
#+HUGO_SECTION: posts/permanent
#+HUGO_CATEGORIES: permanent
#+HUGO_TAGS: permanent mac
#+HUGO_DRAFT: false
#+STARTUP: content
#+STARTUP: nohideblocks

** 不要な情報の削除

まずは整理整頓の基本である不要なモノを捨てるところから。以下のような手順を踖んだら容量カツカツ状態から62GB開けることができた。

[[https://hnw.hatenablog.com/entry/20131117][hardlink.pyを使ったらディスクの空き容量が劇的に増えた]] こういうのもあるが今回は使わない。

*** 不要repoの削除

僕はすべてのソースコードをghqで管理している。snippet的なコードは適当なファイルやディレクトリを作って書き、終わったらブログにまとめてから削除するという運用をとっている。

気になるrepoはすぐにghq getでcloneして容量を食いまくっていたので、以下のscriptでガンガン削除していった。

#+begin_example
$ ls ~/.ghq/github.com | peco | xargs rm -fr
$ ghq list --full-path | peco | xargs -L1 rm -fr
#+end_example

*** 不要なbrew packageの削除

勢いでbrew installしたpackageなどが相当あったのでいらないものは削除していった。

#+begin_example
$ brew list | peco | xargs brew uninstall
#+end_example

*** 不要なnpm/go/gem packageの削除

普段 ~npm i -g xxx~ や ~go get -u xxx~ や ~gem install xxx~ などで気軽にpackageをいれてたので削除していった。

*** chromeのcacheやextensionの削除

意外と大事。新しい環境でも同じ体験ができるように一度消してみるのも良いだろう。

bookmarkなどは一切使わなく、url barに直接入力する運用をとっているので削除した直後は不便にはなるが、何が必要なのか分かるのでそれはそれで良い（パスワード周りとか特にそう）

*** Docker関係の整理

[[https://qiita.com/ksato9700/items/b0075dc54dfffc64b999][Dockerのあれこれを断捨離する]] この記事がすごい良かった。Dockerは再現性のある環境なはずなので一度すべてを消しても良いだろう。

このへんを適当にたたくとだいたい消えてくれる。

#+begin_src shell
  $ docker ps -q | xargs docker rm -f
  $ docker images -q | xargs docker rmi -q
  $ docker system prune
  $ docker image prune
  $ docker container prune
  $ docker volume prune
#+end_src

*** 不要なDesktop Applicationの削除

入れたはよいけど使わなかったものは多いだろう。必要ならまたinstallすれば良いのでいったん消すというのもあり。VSCodeなどを削除した。

*** 不要なprocessの削除

PCを長持ちさせるためにもなるべく余計なprocessはkillしたい。
~Activity Monitor~ や ~htop~ でprocessを見ておかしなものがないか、いらないものはないか洗い出す。

+SKYSEAやウィルスバスターはウィルスだよな+

** データの管理
*** ソースコード

上記の通り、基本的にGitHubへあげるようにしている。
以前GitHubのprivate repoが有料だったので、takeokunn.xyzのterraformや前職のコードはGitLabにあげている。

GitLabで管理するのもイマイチ感あるので、GitHubか自宅サーバに移行したい。

*** dotfiles

開発に必要なツールのconfigはすべて[[https://github.com/takeokunn/dotfiles][takeokunn/dotfiles]]で一括管理するようにしている。

Dotfilesでは ~brew/apt~ のpackageを一括でいれられるscriptや、それぞれのツールがコマンド一発で入るようにMakefileを書いている。

Emacsのconfigだけ量が多いのと、GitHub Pagesで公開したいので別repoで管理をしている。

[[https://github.com/takeokunn/.emacs.d][takeokunn/.emacs.d]]

*** パスワード

[[https://bitwarden.com/][bitwarden]]ですべてのWebサービスのパスワードを一括管理している。
無料だし使い勝手が良いので満足している。

セキュリティを意識して、MFAを登録できるWebサービスはなるべくすべて設定するようにしている。

やはり、パスワードは人間が覚えるものではない。

*** ssh keys

ssh keyを紛失するとサーバにはいれなくなって詰む可能性もあるのでちゃんと管理したい。

bitwardenに ~ssh keys~ というフォルダを作ってシークレットメモに貼り付けている。

*** GoogleDrive

契約書やちょっとしたファイルなどを管理している。エンジニアリング以外のデータを雑にあつかえるstorage
serverとして使っている。情報を整理してきれいに運用したい。

** 今後の課題

- ~~/.ssh/config~ の管理をどうしよう
- ~.skk-jisyo~ の管理をどうしよう
- ~org/*.org~ の管理をどうしよう
- ~~/.local/share/fish/fish_history~ の管理をどうしよう

Dropboxを使うと解決するんだけど、個人的には常にDropboxを立ち上げ続けるのはうーんって感じなので良い運用を考えている。

shellのhistoryは資産なのでこういうのをうまく管理する方法を知りたい。

--------------

やはりpecoは良い。
