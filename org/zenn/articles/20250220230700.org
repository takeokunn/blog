:PROPERTIES:
:ID:       D5B1CCF7-4CB7-48EF-BC08-48747F6D8137
:END:
#+TITLE: PHPカンファレンス名古屋2025で「PHPUnitを低速化する技術」というテーマで話します
#+DESCRIPTION: description
#+DATE: 2025-02-20T23:12:10+0900
#+GFM_TAGS: php
#+GFM_CUSTOM_FRONT_MATTER: :emoji 👍
#+GFM_CUSTOM_FRONT_MATTER: :type tech php
#+GFM_CUSTOM_FRONT_MATTER: :published false
#+STARTUP: content
#+STARTUP: fold
#+OPTIONS: toc:nil
* Introduction

2025年に開催されたPHPカンファレンス名古屋に参加して、「PHPUnitを低速化する技術」というテーマで登壇します。
本記事は登壇の補足記事です。

#+begin_export html
https://fortee.jp/phpcon-nagoya-2025
https://fortee.jp/phpcon-nagoya-2025/proposal/8c520c5c-d564-4f6e-b5d9-10821b35d98c
#+end_export

* 登壇タイトルについて

タイトルはhanhanさんの「Laravel を低速化する技術」を文字ったものになっています。

#+begin_export html
https://fortee.jp/phpcon-2022/proposal/1121ac50-2938-4e8d-9701-ce24963c38a8
#+end_export

この登壇は以下ような方を想定して構成しています。

- PHPUnitが遅いプロジェクトを担当している方
- 現状のPHPUnitの実行速度を速めたい方

プロポーザルが通った後に知ったのですが、「PHPUnitを低速化する技術」というタイトルはいさなさんが先に書いてました。被ってしまってすみません。

#+begin_export html
https://zenn.dev/lancers/articles/how-to-slow-phpunit
#+end_export
* 触れないこと

- 具体的なテスト手法については触れないし、俺自身はテスト自体にそこまで興味がない
- 同僚のrikutoさんの登壇が非常によかったし、会社のプロジェクトでもこうしていきたい
- 「DBをからめたものを単体テストとは言わない」という派閥もいるようだが、今回はリアルワールドでよくあるテストの話をする

#+begin_export html
https://fortee.jp/phpcon-2024/proposal/7edc5567-d741-4d6a-bfa7-732afb7dd311
#+end_export
* 導入部分
** テストが遅いのは悪

規模の大きいプロジェクトに配属されてる人は大体PHPUnitの遅さに悩まされていると思います。

- モダンなプロジェクトでは大体CIが導入されている
- PHPUnitの実行時間が長いとmergeまでの時間が長い
- Four Keys的にはよくないよね

** テストとコード規模

- 以下のようなテストは遅い?
  - 1万行くらいのコードベースで5分
  - 10万行くらいのコードベースで10分
  - 100万行くらいのコードベースで30分
- みなさんのコード規模とテスト時間のアンケートを取る

** そもそも遅いって何?

- 自分とチームの感覚
  - 正直時間と共に慣れる
  - 何分なら耐えられる?
    - Localでの変更対象箇所の実行はどう?
    - CIの待ち時間としてはどのくらい待てる?
- 人生は限られてる
  - コスパの良い努力をしたいよね

** 事例紹介

- [[https://zenn.dev/openlogi/articles/bba928c9e07af3][PHPConf2023「保守性の高いアプリケーションを作り続けるための基盤整備について」というテーマで登壇します]]
- 当時90〜120分かかってたものを15〜20分程度にした
- 最近コードベースが爆発して30分くらいかかってたので20分程度まで抑えた
  - phpunit.xmlの分割方法見直し、並列数上げる
  - 重いテストを各チームにフィードバックをした
    - 10秒以上かかるテストは直してもいいんじゃないか
- 外部連携のシステムも18分→8分程度にチューニングした
  - phpunit.xmlの分割方法見直し、並列数上げる

* ベースの考え方
** 一般的にPHPの重い部分ってどこ?

- PHP外のI/Oが重い
  - Network
  - DBへの通信
  - 巨大なファイル
- xdebugが重い
- Loopをいっぱい回す

** どこの部分が支配的か

- AAAパターン
  - https://xp123.com/3a-arrange-act-assert/
  - Arrange, Act, Assert の Arrange, Act が支配的

#+begin_src php
  /**
   ,* @test
   ,*/
  public function add()
  {
      // Arrange: テストの準備
      $calculator = new Calculator();

      // Act: 実際の操作
      $result = $calculator->add(2, 3);

      // Assert: 結果の検証
      $this->assertEquals(5, $result);
  }
#+end_src
** 推測するな計測せよ

- [[https://github.com/ergebnis/phpunit-slow-test-detector][ergebnis/phpunit-slow-test-detector]]
  - 重いテスト計測
- GitHub Actions
  - Actions Usage Metrics

#+begin_src text
  PHPUnit 10.0.0 by Sebastian Bergmann and contributors.

  Runtime:       PHP 8.1.0
  Configuration: test/EndToEnd/Default/phpunit.xml
  Random Seed:   1676103726

  .............                                                                                                                                                                                                                                                                                                   13 / 13 (100%)

  Detected 11 tests where the duration exceeded the maximum duration.

   1. 1.604 (0.500) App\SampleTest#handle#9
   2. 1.505 (0.500) App\SampleTest#handle#8
   3. 1.403 (0.500) App\SampleTest#handle#7
   4. 1.303 (0.500) App\SampleTest#handle#6
   5. 1.205 (0.500) App\SampleTest#handle#5
   6. 1.103 (0.500) App\SampleTest#handle#4
   7. 1.005 (0.500) App\SampleTest#handle#3
   8. 0.905 (0.500) App\SampleTest#handle#2
   9. 0.805 (0.500) App\SampleTest#handle#1
  10. 0.705 (0.500) App\SampleTest#handle#0

  There is 1 additional slow test that is not listed here.

  Time: 00:12.601, Memory: 8.00 MB

  OK (13 tests, 13 assertions)
#+end_src
** テストと本番の違い

- 本番環境はユーザの動きに依存するが、テストは自分で意図的にプログラムを毎回実行することができる
  - 重いJobも意図的に実行することができる
- 本番はデータベース内にリアルデータが入っているが、テストは自分で用意するしかない

* 実例
** ミドルウェア部分
*** ブラジルにDBを置く

- Network IO
  - https://speakerdeck.com/hanhan1978/how-to-slow-laravel-php-con-2022?slide=57
*** xdebugをやめる

- xdebug死ぬほど重い
  - 本番環境でxdebug有効にしてる人なんかいませんよね...?
- カバレッジを取りたいならpcovがいい
*** php.ini

- memory_limitのような値を小さくする
- opcacheは基本的に有効にした方がいい
- jitは有効にした方がいいのかもしれない
  - flaky testが怖い
  - ちゃんと検証できてない
- 基本的にCPUバウンドな処理が支配的ではないので気休め程度
*** 直列実行

- 何もしなかったら直列で全てが実行される
- github actions matrix紹介
- paratest紹介
  - テストの前後関係が重要になってくる
  - flaky testが発生する可能性がある

** Arrange部分
*** setUpでDBを初期化する

- artisan command
  - migrate:fresh か db:seed
- setUpBeforeClassを使う方がいい
  - https://moyasystemengineer.hatenablog.com/entry/2015/11/23/124934
*** 大量のdummy dataを用意する
#+begin_src php
  UserModel::factory(10000)
      ->has(UserProfileModel::factory())
      ->has(UserProfileModel::factory())
      ->create();
#+end_src
** Act部分
*** そもそもappのコードを遅くする

- hanhanさんのコード
  - https://speakerdeck.com/hanhan1978/how-to-slow-laravel-php-con-2022?slide=61
  - Eager Load
  - Limit廃止
- 以下のようなコードがあった
  - 1000件のページネーションのテストで出庫依頼Jobを1001件発火させている
  - 10秒6回(計1分間)リトライして駄目だった場合落ちる動線のテスト
*** 外部へAPI Requestを飛ばす

- Networking
- 他社の本番サーバにリクエストを飛す

* まとめ

PHPUnitを高速化することによって開発サイクルを早めよう。

- PHPという言語がボトルネックになることは早々ない
  - 主観だがほぼDBのI/Oがボトルネック
- そもそもテストの書きやすいコードベースにしようね
  - 無理のあるコードベースのせいで遅くなることは
