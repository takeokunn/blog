:PROPERTIES:
:ID:       8311DF4F-44EF-4541-BB28-889161EE216A
:END:
#+TITLE: Bitwardenからpassword-storeに移行した
#+AUTHOR: takeokunn
#+DESCRIPTION: description
#+DATE: 2024-01-08T21:13:54+0900
#+HUGO_BASE_DIR: ../../
#+HUGO_CATEGORIES: fleeting
#+HUGO_SECTION: posts/fleeting
#+HUGO_TAGS: fleeting password-store
#+HUGO_DRAFT: false
#+STARTUP: content
#+STARTUP: nohideblocks
* Introduction

Bitwardenからpassword-storeに移行したので作業内容をメモしておく。

* Basic

- 普段使うものは可能な限りPlain TextとGitで管理したい
- EmacsやTerminalから簡単に呼び出したい
- [[https://www.gnupg.org/][GnuPG]]を可能な限り活用したい

* Goal

- Bitwardenに保存されているすべての情報をpassword-storeに移行する
- EmacsやTerminalから簡単にパスワードを取得できるようにする

* Not Goal

- Bitwardenのアカウントを完全に削除する
  - 数年間使わなくても問題なかったら適切に削除する

* 技術選定

[[https://www.passwordstore.org/][password-store]]を選択した理由は以下。

- 十分に枯れている
- Plain TextとGitで管理できる
- password-storeが挙動しなくなってもGPGさえ動けば良い
  - shell scriptの小さなコードベースで書かれている
  - GPGが動かない時は =git commit= もできない状態なので根本的に問題
- 2024年現在所属している会社でpassword-storeを使っている
  - ref. [[https://qiita.com/karronoli/items/7ac1984712495fdc570d][Pass: The Standard Unix Password Manager の紹介 - Qiita]]
- [[https://ja.wikipedia.org/wiki/Time-based_One-time_Password][TOTP]]に対応している
- Emacs Packageがある

周りのエンジニアに何を使っているのか聞いたところ、[[https://1password.com/jp][1password]]や[[https://bitwarden.com/][Bitwarden]]を使っている人が大半だった。

* 作業手順
** 1. Bitwardenからパスワードを抽出する

[[https://github.com/bitwarden/clients][bitwarden/clients]] を手元のPCに入れる。

#+begin_src console
  $ bw --version
  2023.12.1
#+end_src

Loginしてセッションを取得。

#+begin_src console
  $ bw login
#+end_src

=bw list items= コマンドを叩いてパスワードを抽出する。

#+begin_src console
  $ bw list items --session <session_id> \
        | jq '.[] | { folderId: .folderId, name: .name, login: .login }' \
        | jq . > /tmp/bw.json
#+end_src

以下のようなjsonが =/tmp/bw.json= に出力される。

#+begin_src json
  {
    "folderId": "ad72f121-6385-49ea-8983-xxx",
    "name": "foo",
    "login": {
      "fido2Credentials": [],
      "username": "name",
      "password": "pass",
      "totp": null,
      "passwordRevisionDate": null
    }
  }
  {
    "folderId": "ad72f121-6385-49ea-8983-yyy",
    "name": "bar",
    "login": {
      "fido2Credentials": [],
      "username": "name",
      "password": "pass",
      "totp": null,
      "passwordRevisionDate": null
    }
  }
#+end_src

** 2. passコマンドをインストールする

私はNixユーザーなので[[https://search.nixos.org/packages?channel=23.11&show=pass&from=0&size=50&sort=relevance&type=packages&query=pass][Nix Packageからpass]]を落としてくる。以下のような設定で[[https://github.com/nix-community/home-manager][home-manager]]経由で入れる。

#+begin_src nix
  { pkgs, ... }:

  {
    home.packages = with pkgs; [
      (pass.withExtensions (extensions: with extensions; [ pass-otp ]))
    ];
  }
#+end_src
** 3. password-storeのリポジトリを作成する
GitHub Private Repoを作成し、[[https://wiki.archlinux.jp/index.php/Pass][pass - archlinux wiki]]を参考にpassword-storeを作る。

#+begin_src console
  $ pass init <gpg-id or email>
#+end_src
** 4. password-storeへパスワードを移行

=folder_id= の一覧APIはなさそうだったので、Bitwardenの画面と照らし合わせて手動でfolder_idを取得する。

#+begin_src console
  $ cat /tmp/bw.json | jq 'select(.folderId == "<folder_id>")'  | jq . > /tmp/<folder>.json
#+end_src

抽出したものを手動で下記のようなフォーマットに変換した。

#+begin_src console
  P@ssw0rd
  url: https://servicename.com/
  username: username
#+end_src

** 5. Fish Shell設定

=config.fish= に以下の設定を追加する。

#+begin_src fish
  if type -q pass
      set -x PASSWORD_STORE_DIR $HOME/ghq/github.com/takeokunn/password-store
      set -x PASSWORD_STORE_ENABLE_EXTENSIONS true
  end
#+end_src

Fish Completionはここから落としてくる。

[[https://github.com/zx2c4/password-store/blob/master/src/completion/pass.fish-completion][https://github.com/zx2c4/password-store/blob/master/src/completion/pass.fish-completion]]

** 6. Emacs Plugin導入

以下のように[[https://github.com/NicolasPetton/pass][NicolasPetton/pass]]を設定する。

#+begin_src emacs-lisp
  (autoload-if-found '(pass pass-view-mode) "pass" nil t)

  (add-to-list 'auto-mode-alist (cons (substitute-in-file-name "$HOME/ghq/github.com/takeokunn/password-store/.*\\.gpg") 'pass-view-mode))

  (with-eval-after-load 'pass
    (setq pass-suppress-confirmations t))
#+end_src

=pass-view-mode= 用に以下のような[[https://github.com/joaotavora/yasnippet][yasnippet]]を設定する。

#+begin_src text
  # -*- mode: snippet -*-
  # name: template
  # key: template
  # --
  url: $1
  username: $2
  memo: $0
#+end_src

* Result

183個の秘匿情報が入ったgpgファイルを作成した。

#+begin_src console
  $ git -C ~/ghq/github.com/takeokunn/password-store ls-files | grep .gpg | wc -l
  183
#+end_src

以下のようなディレクトリ構成を作成した。

#+begin_src shell
  ~/.ghq/github.com/takeokunn/password-store/
  ├── README.org
  ├── .gpg-id
  ├── private
  |   └── life
  |       └── 楽天証券.gpg
  ├── project-A
  ├── project-B
  └── project-C
      └── shopify
          └── aaa.gpg
      └── infra
          └── aws.gpg
#+end_src
* NextStep

- ディレクトリ構成を整理する
- TOTP周りを[[https://authy.com/][Authy]]から[[https://github.com/tadfisher/pass-otp][pass-otp]]に移行する
- GPG Private Keyの管理方法を考える
  - [[https://keens.github.io/blog/2021/03/23/yubikeywotsukau_openpghen][YubikeyでOpenPGP鍵をセキュアに使う - κeenのHappy Hacκing Blog]] が良さそう
* 所感
Bitwardenは使いやすく特に文句がなかったので、理由がない限りはでpassword-storeに移行する必要はないし、これからパスワードマネージャーを入れる人はBitwardenを勧めたい。
