:PROPERTIES:
:ID:       E4B1AA1E-52C0-4A8F-91F3-F4119ACE2BC6
:mtime:    20230624150419
:ctime:    20221214165044
:END:
#+title: fluent-bitに入門する
#+DESCRIPTION: fluent-bitに入門のしかたについて纏めた
#+DATE: 2022-12-07
#+HUGO_BASE_DIR: ../../
#+HUGO_SECTION: posts/permanent
#+HUGO_TAGS: permanent fluent-bit
#+HUGO_DRAFT: false
#+STARTUP: content
#+STARTUP: nohideblocks
* 始めに

複数のサーバを管理すればする程、loggingの重要性が高まります。
特に2022年はコンテナ最盛期と言っても過言ではないくらいコンテナ化が進んでいています。

logを適切に扱うことができればできるほど、運用の質を上げることができます。

* fluent-bitとは

fluent-bitは高速なlogging libraryです。

[[https://github.com/fluent/fluent-bit][https://github.com/fluent/fluent-bit]]

[[file:../../static/images/A53EA3D4-B9C5-4885-9E28-A36801B82581.png]]

FluentdはRuby実装で、fluent-bitはC実装です。
シングルバイナリで提供できるので、Dockerではfluent-bitの方を用いられることが多いです。

fluent-bitと調べてもあまりまとまった情報がなく、非常にとっつきにくいので後学のためにまとめておく。

* 環境構築

[[id:7622D819-68E9-4265-83D5-40E1AC66F930][fluent-bitをDockerで動かす]] を参考に作ると良い。

* どうやって詳しくなっていけば良いか

fluent-bitは ~input~ ~parser~ ~filter~ ~routing~ 部分を弄ることになる。

それぞれ以下のドキュメントに細かく書いてある。
[[https://docs.fluentbit.io/manual/pipeline/pipeline-monitoring][https://docs.fluentbit.io/manual/pipeline/pipeline-monitoring]]

input値挟まざまな値を取ることができる。

[[https://docs.fluentbit.io/manual/pipeline/inputs/dummy][https://docs.fluentbit.io/manual/pipeline/inputs/dummy]]

input値を変えてみたり、filterやoutput（routing）を変えながらどのように風に変化するか弄ってみると良い。
