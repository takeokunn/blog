:PROPERTIES:
:ID:       9B9F3EEC-C2C2-477D-B7F5-4D467AFA29CB
:END:
#+TITLE: 2025年7月時点 AI前提の開発プロセス案
#+AUTHOR: takeokunn
#+DESCRIPTION: description
#+DATE: 2025-07-14T17:46:22+0900
#+HUGO_BASE_DIR: ../../
#+HUGO_CATEGORIES: permanent
#+HUGO_SECTION: posts/permanent
#+HUGO_TAGS: permanent
#+HUGO_DRAFT: true
#+STARTUP: fold
* Introduction

- 2025年から生成AIが爆発的に成長した
- AI前提の開発プロセスを抜本的に整える必要がある
- 従来の開発フローを拡張してAIが働きやすい環境を整えて運用してみているので纏めておく
- 小さく作るなら所謂Vibe Codingで生成させればよいが、ちゃんとプロダクションコードとして運用に乗せるならAI前提のフローを構築する必要がある

* 従来の開発フロー
** 遷移図

- Role
  - PM
  - エンジニア
  - QA
- Flow
  - PMがIssue Tracker（e.g. GitHub Issue）にチケットを起票する
  - チケットにエンジニアがアサインされる
  - エンジニアが影響範囲と実装方法を調査する

** 特徴

- コミュニケーションコストが発生する

* 従来の開発フローの問題点

- PMが正確に要件定義をする必要がある
- ドキュメントとコード管理が離れている
- エンジニアは要件定義と仕様を読んでプランニングする必要がある
- 実装に無理があった場合、再度仕様調整をする必要がある
- 他人が書いたコードのレビューに時間がかかる
- 手動のQA動線を実行する必要がある
- 基本人の手（目）が介在する

* AI Agent前提の開発フロー
** 遷移図

- Role
  - AI Agent
  - AI Coding Agent
  - AI Review Agent
  - PM
  - エンジニア
  - QA
- Flow
  - PMがIssue Tracker（e.g. GitHub Issue）にチケットを起票する
  - チケットにエンジニアがアサインされる
  - エンジニアが影響範囲と実装方法を調査する

** 特徴
* AI Agent前提の開発フローにおける努力ポイント

- AI AgentのIssue作成精度を上げる
- AI Coding Agentの生成するコードの質を上げる
- AI Review Agentのレビューの質を上げる

* ドキュメントやプロンプト運用案

- Issue Tracker
  - 過去の仕様を溜める
- docs/
  - 現在の最新の仕様を纏める
  - 3軸で書く
    - プロジェクト全体の規約
    - 機能面の仕様を書く
    - ディレクトリ内の情報を書く
- Prompt
  - issue作成用プロンプト
  - コーディング用プロンプト
  - review用プロンプト
  - docs/ を更新するプロンプト

* 推奨しているプロジェクト構造
** プロジェクト全体

- CIが整備されている
- 型情報がガチっと付与されていて影響範囲が明確
- 標準的なコーディング規約
- テストが手元で高速に回る
- モノレポの方がagentを動かしやすくてよい

** ディレクトリ構造

- 基本的に平行実装をする前提で設計する必要がある
- package by featureが個人的にはよい
- packageごとにクリーンアーキテクチャで記述する
  - AIがどこに何を書けばいいのか明確になる
  - t-wadaさんの推奨するTDDを実践しやすくなる

** ディレクトリ例
*** 1. react router例
*** 2. Laravelクリーンアーキテクチャ
* 終わりに

- 既存のフローを踏襲してAIによって効率的に開発していくのでSREのような仕事がより重要になっていく感覚がある
- 既存のベストプラクティスをきちんと言語化することが求められるので学びになる
- 労力を割けば割くほど効率が上がる仕組みを作ってがんがん世の中に価値を出していきたい
