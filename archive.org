#+STARTUP: content
#+STARTUP: nohideblocks

* articles
** 半年間毎週dependabotをmergeしたので知見を纏める

- slug: knowledge-dependabot-merge
- date: 2020-09-09 06:17:55

#+begin_src markdown
  本業のRailsプロジェクトのdependabotをひたすら毎週月曜日の11時にmergeし続けて半年以上たったのでそろそろ知見をまとめておこうと思う。

  ----------------

  ## はじめに

  世の中のライブラリには大きく分けて3種類ある。

  フレームワークと開発支援ツールと通常のライブラリだ。

  基本的に全部のdependabotの生成したpull requestに関して、CHANGELOGとコードレベルのdiffを読むようにした。CHANGELOGだけでも良かったのだが、多くのOSSのライブラリのversion upはどういう場合に起こるのかなど傾向を掴むためだ。

  ## diffの読み方

  変更頻度の高かった順(takeokunn調べ)に並べるとこんなかんじ。

  ,* テストの追加
  ,* CI関連の記述の追加
  ,* ドキュメントの整備
  ,* 命名の修正
  ,* 関数の分離や引数の整理
  ,* 新機能の実装

  業務では有名ライブラリ使っていた影響か、保守的な変更が多かった。

  最近だとblacklistが駄目だとかその辺の変更がめちゃくちゃ多かった印象。

  事故るとしたら「命名の修正」と「関数の分離や引数の整理」の部分だけなのでそれ以外は読み飛ばしても基本的には大丈夫だ。

  ## フレームワークの場合

  RailsやLaravelなど。

  必ずRELEASE NOTEを読んで注意深くあげるようにする。

  マイナーバージョンアップの場合(ver5.1.1→ver5.1.2)はそこまで神経質にならなくても良い。

  メジャーバージョンアップの場合(ver5.2→ver6.0)はテストを充実させる、ステージング環境での十分な検証が必要だ。それでも細かいバグがでるので本当に神経質に確認を取る必要がある。

  こう時にphpstanなどの静的解析でぱぱっと検証できるのが理想だよなぁと思う。Railsにはそういうのがないから辛い。

  ## 通常のライブラリの場合

  FaradayやらDeviseなど。

  CHANGE LOGをみてBreaking Changeがなければmergeしちゃって良い。

  そんなに破壊的変更を入れるライブラリはなかったし、事故もおきなかった。

  テストで検知できるようにはしておきたい。

  ## 開発支援ツールの場合

  RubocopやらEsLintなど。

  基本的にノールックマージして良い。事故ってもCIが落ちるだけなので別にオッケー。

  Rubocopはよくconfigの書式がかわったりするのでなるべく頻度高く上げておかないと後々しんどくなる。

  --------

  ## おわりに

  あたりまえのことしか書いてないが、あたりまえのことをあたりまえにやろう(自戒)

  開発ツールだろうがフレームワークだろうがバージョンを一気にあげるのは本当にきついので普段から上げることをサボらないようにしないとしんどい(しんどい)

  どのプロジェクトにも必ずdependabotはいれたいなーと思うようになったが、CIを圧迫するのだけはなんだかなぁ....
#+end_src

** MacでSKKを使い始めて1ヶ月経ったので纏める

- slug: mac-skk-one-month-passed
- date: 2020-09-15 03:13:13

#+begin_src markdown
  8/15の深夜にsaizeriyan.phpのdiscordでノリでSKKを使いはじめて早1ヶ月、結構使い込んでいるので所感を纏めておく。

  ------------

  [saizeriyan.php](https://twitter.com/tadsan/status/1288090236115750912)はこちら。適当に配信したり適当に雑談したりする適当なチャンネルでphpとは名ばかりの適当なチャンネル。

  [@tadsan](https://twitter.com/tadsan)にSKKの使い方について教えてもらってもらい、自分なりに色々調べたので纏めておく。

  ## AquaSKK

  > AquaSKK は Mac OS X 用のかな漢字変換プログラムです。多機能エディタ GNU Emacs 用に開発された SKK の思想を受け継ぎ、シンプルで快適な日本語入力環境を目指します。

  [https://aquaskk.osdn.jp/](https://aquaskk.osdn.jp/)

  [キー割り当て](https://aquaskk.osdn.jp/keymap.html)を叩きまくって練習した。

  環境設定は以下のように有効にした。

  ```markdown
  ,* 入力操作
      ,* Enterによる確定で改行しない
      ,* 数値変換を有効にする
      ,* 入力モードアイコンを表示
  ,* 拡張設定
      ,* SKK日本語入力FEP/Egg互換の記号入力を使う
      ,* 旧かな用ルールを使う
  ,* 辞書
      ,* 全部有効
  ,* その他
      ,* skkserv
          ,* 有効にする port: 9999
          ,* localhost以外からの接続を拒否する
      ,* 送りあり変換: キャンセルで送り仮名を削除する
  ```

  [使える『z』、便利な『z』](https://aquaskk.osdn.jp/inside_aquaskk/02.html)や[タブ、使ってますか？](https://aquaskk.osdn.jp/inside_aquaskk/03.html)あたりがめちゃくちゃ良い。

  一ヶ月くらい日常的に使ってようやく辞書が充実してスムーズに入力できるようになってきた。やる気がない時にひらがなで逃げる癖もついてしまったのは内緒。

  そもそも送り仮名なんだっけ?って時はchromeの検索バーで検索しながら辞書登録をするのでオフラインだときついというのはある。

  ## Emacs DDSKK

  [SKK (Simple Kana to Kanji conversion program) Manual](https://ddskk.readthedocs.io/ja/latest/index.html)を参考にしてどういう挙動なのかを調べた。

  ```lisp
  (leaf ddskk
    :ensure t
    :bind
    ("C-x C-j" . skk-mode)
    :setq
    (skk-server-portnum . 9999)
    (skk-server-host . "localhost"))
  ```

  基本的にはAquaSKKと同じ挙動をしているのでとっつきやつい。`C-x C-j` でskk-modeにして日本語入力、それ以外は通常通りに入力するような運用をしている。

  AquaSKKはskkservも提供してくれているので辞書の共有がすごい楽だった。

  `RET` は普段 `mark` にしているのでskk-modeの場合だけちゃんと改行するようにしてあげたほうがいいかもみんなどうしてるんだろう...?詳しい人に聞いてみたい。

  解決しました → [Emacs DDSKKの設定メモ](https://takeokunn.xyz/blog/post/mac-skk-one-month-passed)

  ## 今後の展望

  - skkservを自作して動かす
  - ユーザ定義辞書をどうやって管理すべきか考える
  - [AZIK](http://hp.vector.co.jp/authors/VA002116/azik/azikinfo.htm)を使いこなす
  - 顔文字の登録

  使い倒して日本語入力に自信ニキになりたい。
#+end_src

** 新人教育をしていて一番大事なのは「試行回数」だと思った

- slug: most-important-thing-number-of-trials-for-newbie
- date: 2020-10-03 01:57:36

#+begin_src markdown
  3ヶ月~半年くらいで他の社員と遜色無い人もいる。数年やっても向いてないんじゃないかというくらいできない人もいる。少しずつ着実に成長してる人もいる。

  新人教育を1~2年10人くらいやってるのだが、いったい何が違うんだろうとずっと思い続けてきたがようやく自分なりにまとまってきたので書いておく。

  -------------------------------

  ## 前提

  新人とはプログラミング経験年数2年以下くらいのwebエンジニアの初心者を想定している。(自称初心者ではない)

  今勤めている会社では大学生インターンや未経験のような新人を積極的にとってきた。自分はお節介を焼くのが趣味なので、勝手に教えてたら(知識をひけらかしてたら)思ったよりも成長してくれる人が何人かいたし、逆もまた然り。

  最近はAWS業務やrailsを書きつつ新人の育成が仕事になっている。

  僕自身は所々で教えてくれる人はいたものの、ちゃんと「教育」をされたことがないのでよくわらないし、コーチング技術なんてものはわからないし、脳筋なのでフィーリングで書いていく。(大学は情報科いたけど中退しちゃったので専門的なことはわからん)

  ## 新人教育はなんでやるの？

  [ジュニアを採用しない連中はシニアに値しない](https://portalshit.net/2018/10/02/we-should-hire-junior-engineers)という記事にまとまっている。

  エンジニア人口が増えることは人手不足のIT業界にとって良い影響を与え、またOSSにも貢献できると思う(利用することも貢献の一種)。

  幸いなことに、今の会社はそれなりにちゃんとしたエンジニア組織があり育成環境があるのでちゃんと育成すればワークする。母数の少ないシニアエンジニアを採用をするのは難しいので育成するという選択を取るのはそれはそれで正しい判断だと思う。

  個人的には、自分の仕事を ~~押し付けられる~~ できる人材が増えると自分の時間が空くので、他の技術に時間を投資できるようになると思っている。

  ## 一番大事なのは試行回数

  どの分野でもそうだが、結局の所「**試行回数を増やせば増やすほど成長をする**」ので「**試行回数を最大化する**」ように取りくむのが最善だと思う。

  試行回数に関して明確に定義はできないが、「目の前の問題を解決した回数」や「言語やライブラリの仕様を理解すべく取り組んだ回数」などを想定している。「Rubyの四則演算を学ぶ」のと「Rubyのcompilerの実装を読む」のようなレベル差があるものを同等に扱うべきではないが、一旦無視する。

  急速に成長する人は上手に試行回数を増やす方法を知っており、それを忠実に実践できる。そうではない人この限りではない。

  試行回数を増やすには以下のような取り組みが考えられる。

  ,* 問題に取りくむ時間を増やす
  ,* 既知の問題から推測できるように既知の問題の理解を深める
  ,* 常に最新の情報をキャッチアップできる仕組みを作る
  ,* shellやエディタをカスタマイズし効率的に検証できるようにする
  ,* 必要な情報を取得するために効率的に検索をできるようにする
  ,* ショートカットキーを駆使し余計な時間を使わないようにする
  ,* 小さく検証できる環境を用意する
  ,* 健康的な生活をして集中的に取りくめるようにする
  ,* 友人や知人にプログラマを増やし、教えてもらえる環境を作る
  ,* PCの画面を広く使う
  ,* ひたすらコードを書いて検証する
  ,* 自分の得た知識が正しいかどうか他者に説明して検証する

  如何に余計なものを排除して試行回数を稼げるかが最も重要だ。

  ## 新人にはざっくり4タイプくらいにわけられる

  なんとなく自分の中で4タイプにわけて、それぞれに合った方法で教える。

  ### 別分野で既に一定の技量があるタイプ

  既に別分野でスキルの身につけ方を知っていて、webプログラミングにも応用できるような人。

  そもそも別分野で知識を深める方法や試行回数を増やす大事さを知っているので勝手に勉強して勝手に伸びるので、こちらから教えることはそんなになくて非常に楽。

  難しい文章を読むのにも抵抗がないので、すぐに普通のプログラマを追いこす場合が多い。

  ### 高負荷に耐えられ、時間で殴れるタイプ

  自分も割とこれなので、一番教えてて楽しいタイプ。

  時間で殴れるので、新しい知識やツールを試す回数が多く成長がめちゃくちゃ速い。

  高負荷に耐えられるので仕事を大量にこなせるし、twitterや社内の技術的な情報のキャッチアップも難無くこなせる。

  高学歴や高専出身が多いイメージ。

  ### 普通のタイプ

  普通にプログラミングを仕事にして、普通に勉強をしているタイプ。

  プログラミングのためだけに生活しているわけではなく、プライベートも重視してるケースが多い。

  twitterにはプログラミングの休憩がてらコード書く狂人だらけだけど、real worldでは普通のタイプが一番多い。

  教える時は情報量をしぼってパンクしないように気をつける必要がある。

  ### 全く向いていないタイプ

  自分なりのやり方に異常に固執したり、こだわりが強い(の割りにデタラメなことを言う)人や、そもそもプログラミング好きではない人だ。

  申し訳ないが、全く向いていない人は一定数いる。

  しょうがない、向いてないのはしょうがないので本人の希望によるけど向いていないものはしょうがない。

  もしかしたら何か別の才能があるかもしれないのでそっちを頑張った方が良いかもしれないし、他の指導者の元で大成するかもしれないので頑張ってほしい。

  ## 新人にはどうなってほしいのかなどを書く

  会社的には「さっさと業務を一人前にこなせる人材になってほしい」というのが本音だろう。

  個人的には上記の通り、「試行回数を最大化するための取り組みを自分で考えて実行してほしい」と思っている。
  ツールにこだわるのも一つの方法だし、業務でタスクをこなすのも大事。
  「先輩に聞くのは申し訳ないかな...?」って思う必要は全くなく、それが必要なら躊躇するべきではない。

  多くのエンジニアは3年くらいで転職するので、きちんと職務経歴書に書くことがある状態にしてほしい。
  いつでも転職できるくらい選択肢をもてている状態にしてあげたいなと思う。

  ## 普段自分が教える時に試してること

  まずは何にせよ信頼関係を築くことから始まる。これほど大事なものはない。
  どんなに技術的に正しいこと、成長に必要なことを熱弁しても信頼関係がなければ何もはじまらない。
  なので雑談をしたり、食事に行ったりして兎に角仲良くなることが大事だ。

  自分が1人に教えられるのは精々週に2時間くらいで、それ以外は基本的に本人が頑張る時間だ。
  問題に取りくむ時に障害になる部分をなるべく排除するべく、まずは以下のようなことをやっている。

  ,* fish shellなどの便利ツールを入れる
  ,* dotfilesを作らせる
  ,* 便利なショートカットキーを教える
  ,* 良い記事にたどりつけるような検索ワードの作り方を教える
  ,* slackのfeedのチャンネルを教えるたり、お勧めのブログを教える

  慣れてきたら次のことを意識して指摘してる。

  ,* コマンドや函数の挙動について説明させる
  ,* 「今やりたいこと」と「どうやるのか」を説明させる
  ,* 技術用語を技術的に説明させる

  意外と「技術的に説明」できないことが多いのだ。
  ちゃんとした技術用語を使えるのがちゃんとしたエンジニアだと思っているので、こういうのをきちんと答えられるようになってほしいと願っている。
  わからないことに関してはわからないと言うのも大事だ。

  例えば「Rails勉強しました!」って人に「CookieとSessionの違いはなんですか?」と聞いた時に前者で答える人が多い。

  ,* sessionはサーバで管理してcookieはブラウザで...
  ,* serverからのresponse headerにset-cookieでsession_idが送られてきて、それ以降はrequest headerのcookieにsession_idを付与してやりとりをする

  ペアプロをする時は、良いコードを書くというよりは悪くないコードを書けるように意識して教えている。
  変数名や函数分割など悪くないコードを書くテクニックは世の中にいっぱいあるので実践させている。

  ## 新人の質問の仕方について

  twitterで新人エンジニアの質問の仕方について話題になっていた。鉄板ネタの話題だ。

  <blockquote class="twitter-tweet"><p lang="ja" dir="ltr">本当に辛い。<br>辛い。<br><br>エンジニアになれたはいいがわからないことが多すぎる。<br><br>「技術の調べ方について」自分のできうる限りの人に質問したはいいが回答が全く得られない。<br><br>それよりも質問の仕方が悪いと非難される。<br><br>どうすればいいのかわからない。</p>— ゆうき@PythonとJavascriptとPhotoshopとミニマリスト (@yuuki_wifi) <a href="https://twitter.com/yuuki_wifi/status/1309997318708449280?ref_src=twsrc%5Etfw">September 26, 2020</a></blockquote>

  個人的にはそもそも持ってる情報量が少ない新人がかちっとしたフォーマットで質問するのはそもそも無理だと思う。

  経験上大体は情報不足だし、そもそもそのアプローチちがくね?みたいに思うことが多い。

  新人から見ても「適当なこといってるとか思われないかな」とか「自分の調査不足を指摘されないかな」とか不安になるだろう。

  「timesのような個人チャンネルを作ってやったことをlog感覚でながしてもらう」というのが一番良い気がする。
  後で自分でも振りかえることも出来るし、logが既にあるので説明も省けるし、質問へのハードルが低くてすむ。

  できない自分を見られるのが恥ずかしいと思っている人もいるが、「試行回数を最大化する」ことが大事なので気にする必要はないと思っている。
  実際、ひたすらtimesに自分の作業を書きまくってものすごく成長した人もいる。

  ## おすすめの勉強法や考え方や記事など

  ### 書籍/記事

  ぱっと思いつくのはこのへん。モチベーションが上がる。

  ,* [情熱プログラマー](https://www.amazon.co.jp/%E6%83%85%E7%86%B1%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%83%BC-%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E9%96%8B%E7%99%BA%E8%80%85%E3%81%AE%E5%B9%B8%E3%81%9B%E3%81%AA%E7%94%9F%E3%81%8D%E6%96%B9-Chad-Fowler/dp/4274067939)
  ,* [ハッカーになろう (How To Become A Hacker）](https://cruel.org/freeware/hacker.html)
  ,* [十年がかりでプログラムを学ぼう](http://norvig.com/21-days.html)
  ,* [ハッカーと画家](https://gist.github.com/sifue/b6506ea6b3f3d3a46a0c3bb885cd5ddf)
  ,* [Clean Coder](https://www.amazon.co.jp/Clean-Coder-%E3%83%97%E3%83%AD%E3%83%95%E3%82%A7%E3%83%83%E3%82%B7%E3%83%A7%E3%83%8A%E3%83%AB%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9E%E3%81%B8%E3%81%AE%E9%81%93-Robert-C-Martin/dp/4048930648)

  ### youtube

  ベテランちというyoutuberの勉強のコツについてすごく面白かった。超おすすめ。

  <iframe width="100%" height="400" src="https://www.youtube.com/embed/n9xm0LdduA4" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

  -----------------------------

  人のこと偉そうに書いて自分はどうなんだって気持ちになるけど、こういうのは思考を整理するという意味でも大事だよね。

  こういうポエムは自分のブログだからこそ書けるのがやっぱ良いね。
#+end_src

** MacBookProの生前整理をする

- slug: pc-cleaninng-before-out-of-order
- date: 2020-10-03 00:00:22

#+begin_src markdown
  PCも人間もいつかはこの世を去る。それが明日かもしれないし、数年後かもしれない。なるべく故障前にデータの移行はやっておきたい。

  ------------

  ## 不要な情報の削除

  まずは整理整頓の基本である不要なモノを捨てるところから。以下のような手順を踖んだら容量カツカツ状態から62GB開けることが出来た。

  [hardlink.pyを使ったらディスクの空き容量が劇的に増えた](https://hnw.hatenablog.com/entry/20131117) こういうのもあるが今回は使わない。

  ### 不要repoの削除

  僕は全てのソースコードをghqで管理している。snippet的なコードは適当なファイルやディレクトリを作って書き、終わったらブログに纏めてから削除するという運用をとっている。

  気になるrepoはすぐにghq getでcloneして容量を食いまくっていたので、以下のscriptでガンガン削除していった。

  [Fish Shellでghqを便利にする](https://takeokunn.xyz/blog/post/fish-shell-ghq-extension) で削除scriptを作ったりもした。

  ```shell
  $ ls ~/.ghq/github.com | peco | xargs rm -fr
  $ ghq list --full-path | peco | xargs -L1 rm -fr
  ```

  ### 不要なbrew packageの削除

  勢いでbrew installしたpackageなどが相当あったので要らないものは削除していった。

  ```shell
  $ brew list | peco | xargs brew uninstall
  ```

  ### 不要なnpm/go/gem packageの削除

  普段 `npm i -g xxx` や `go get -u xxx` や `gem install xxx` などで気軽にpackageをいれてたので削除していった。

  ### chromeのcacheやextensionの削除

  意外と大事。新しい環境でも同じ体験ができるように一度消してみるのも良いと思う。

  bookmarkなどは一切使わなく、url barに直接入力する運用をとってるので削除した直後は不便にはなるが、何が必要なのかわかるのでそれはそれで良い。(パスワード周りとか特にそう)

  ### Docker関係の整理

  [Dockerのあれこれを断捨離する](https://qiita.com/ksato9700/items/b0075dc54dfffc64b999) この記事がすごい良かった。Dockerは再現性のある環境なはずなので一度全てを消しても良いと思う。


  このへんを適当に 叩くと大体きえてくれる。
  ```shell
  $ docker ps -q | xargs docker rm -f
  $ docker images -q | xargs docker rmi -q
  $ docker system prune
  $ docker image prune
  $ docker container prune
  $ docker volume prune
  ```

  ### 不要なDesktop Applicationの削除

  入れたはいいけど使わなかったものは多いと思う。必要ならまたinstallすれば良いので一旦消すというのもあり。VSCodeなどを削除した。

  ### 不要なprocessの削除

  PCを長持ちさせるためにもなるべく余計なprocessはkillしたい。Activity Monitorやhtopでprocessを見ておかしなものがないか、要らないものはないか洗い出す。

  ~~SKYSEAもウィルスバスターもウィルスだよな~~

  ## データの管理

  ### ソースコード

  上記の通り、基本的にはGitHubにあげるようにしている。以前GitHubのprivate repoが有料だったので、takeokunn.xyzのterraformや前職のコードはGitLabにあげている。

  GitLabで管理するのもイマイチ感あるので、GitHubか自宅サーバに移行したい。

  ### dotfiles

  開発に必要なツールのconfigは全て [takeokunn/dotfiles](https://github.com/takeokunn/dotfiles) で一括管理するようにしている。

  dotfilesでは `brew/apt` のpackageを一括でいれられるscriptや、それぞれのツールがコマンド一発で入るようにMakefileを書いている。

  emacsのconfigだけ量が多いのと、github pagesで公開したいので別repoで管理をしている

  [takeokunn/.emacs.d](https://github.com/takeokunn/.emacs.d)

  ### パスワード

  [bitwarden](https://bitwarden.com/)で全てのwebサービスのパスワードを一括管理している。
  無料だし使い勝手が良いので満足している。

  セキュリティを意識して、MFAを登録できるwebサービスはなるべく全て設定するようにしている。

  やはり、パスワードは人間が覚えるものではない。

  ### ssh keys

  ssh keyを紛失するとサーバにはいれなくなって詰む可能性もあるのでちゃんと管理したい。

  bitwardenに `ssh keys` というフォルダを作ってシークレットメモに貼り付けている。

  ### GoogleDrive

  契約書やちょっとしたファイルなどを管理している。エンジニアリング以外のデータを雑にあつかえるstorage serverとして使っている。情報を整理して綺麗に運用したい。

  ## 今後の課題

  ,* `~/.ssh/config` の管理をどうしよう
  ,* `.skk-jisyo` の管理をどうしよう
  ,* `org/*.org` の管理をどうしよう
  ,* `~/.local/share/fish/fish_history` の管理をどうしよう

  Dropboxを使うと解決するんだけど、個人的には常にDropboxを立ち上げつづけるのはうーんって感じなので良い運用を考えてる。

  shellのhistoryは資産なのでこういうのをうまく管理する方法を知りたい。

  ---------------

  やっぱりpecoが最強なのはゆるがない。
#+end_src

** TwitterUIDの挙動とJavaScriptのBigIntについて

- slug: twitter-uid-javascript-bigint
- date: 2020-10-28 05:23:23

#+begin_src markdown
  twitterのuidについて調べてたら、自分の浮動小数点の挙動についての理解度が低いことがわかったので纏めておく。

  -----------------

  事の発端は、spreadsheet上の人力で管理されているtwitterのユーザ情報をデータベースに入れる作業をしていた時だった。

  以前同じような作業をしたとき結構漏れがあったので、twitter uidの妥当性やscreen nameが本当に存在するかどうかを確認する必要があった。

  [TwitterのIDチェッカー](https://idtwi.com/)などのwebサイトを利用してもよかったが、100件を超える量のデータを手動で確認取るのは面倒だったため、以下のような検証scriptを雑に書いた。

  ```shell
  #!/bin/bash
  while read row; do
      TWITTER_ID=`echo ${row} | cut -d , -f 1`
      TWITTER_UID=`echo ${row} | cut -d , -f 2`
      TWITTER_REQUEST_UID=`curl -X GET -H "Authorization: Bearer <TWITTER_TOKEN>" -s "https://api.twitter.com/1.1/users/show.json?screen_name=${TWITTER_ID}" | jq ".id"`
      if [ ${TWITTER_REQUEST_UID} -ne ${TWITTER_UID} ]; then
          echo "${TWITTER_ID}: ${TWITTER_UID} → ${TWITTER_REQUEST_UID}"
      fi
  done < ~/Desktop/twitter.csv
  ```

  そうしたら半分くらいのtwitter uidがずれてしまった。明らかにおかしいと思ったので、きちんと調査することにした。

  ------------------------------

  twitter developer documentに `Twitter IDs` という記事がある。

  [https://developer.twitter.com/en/docs/twitter-ids](https://developer.twitter.com/en/docs/twitter-ids)

  これによると、

  ,* ユーザの増加によりtwitterのuidは64bit unsignedでuniqueな値として管理されている
  ,* javascriptの整数のサイズは53bitに制限されている
  ,* api responseでは整数(`id`)と文字列(`id_str`)の両方を返すような実装になっている

  ここから分かるのは、自分は↑のshell scriptで `id` を見ていたから正しい値をとれていなかった、`id_str` を使うべきだったことがわかる。

  確かに、以下のように `toString()` をしたらずれることが確認がとれたがどうしてだろうか。また、今回はbash scriptを書いたのにjavascriptと同じ挙動をするのはどうしてなのか調べる必要があることが分かった。

  ```javascript
  ~ ｡+ﾟ(∩´﹏'∩)ﾟ+｡ < node
  Welcome to Node.js v15.0.1.
  Type ".help" for more information.
  > (10765432100123456789).toString()
  '10765432100123458000'
  ```

  ------------------------------

  javascriptの数値については [JavaScriptの数値型完全理解](https://qiita.com/uhyo/items/f9abb94bcc0374d7ed23)が一番良く纏まっていた。

  これによると、javascriptの数値型は全てIEEE 754 倍精度浮動小数点数 (double型)で表現されている。確かに、[MDNのNumberの記事](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Number)にも同じような記述がある。

  double型で安全に表現できる最大値は `Number.MAX_SAFE_INTEGER` で取ることができ、 `Number.isSafeInteger()` などでもチェックできる。

  ```javascript
  > Number.isSafeInteger(10765432100123456789)
  false
  > Number.MAX_SAFE_INTEGER
  9007199254740991
  ```

  ただこれではなにかと不都合なので、javascriptにはbigintも用意されている。

  MDNには以下のように書かれているので日常使いするのは辞めておくべきだろう。

  > Number と BigInt との間の型変換は精度が落ちる可能性があるため、 BigInt は値が論理的に253以上になる場合にのみ使用し、この2つの型の間で型変換を行わないこと推奨します。

  [https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/BigInt](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/BigInt)

  先程の巨大な値でも正確に出力することができる。

  ```javascript
  > (10765432100123456789n).toString()
  '10765432100123456789'
  ```

  [caniuse](https://caniuse.com/bigint)を見てるとほとんどのブラウザがBigIntに対応されているので問題なく使えるみたいだ。

  ----------------------------

  浮動小数点にの挙動についてもう少し見てみる。

  ggったらいっぱい出てくるので計算方法は割愛するが、[浮動小数点数型と誤差](https://www.cc.kyoto-su.ac.jp/~yamada/programming/float.html)に分かり易くまとまっている。

  ```
  double の表す値　＝　(-1)^符号部 × 2^(指数部-1023) × 1.仮数部
  ```

  ![double](https://www.cc.kyoto-su.ac.jp/~yamada/programming/double.png)

  ,* 符号は、0なら正、1なら負
  ,* 指数部は、「2^指数」の指数の部分に1023を引いたものが11bit符号無しの整数の形で格納されている
  ,* 仮数部は、実際の仮数部の先頭の「1」を取り除いた残りが格納されている

  という風に格納される。

  仮数部が52bitだが、double型の精度が53bitなのは `1.仮数部` の `1` 部分もカウントされるからみたいだ。

  [ヒドン(Hidden)ビットで精度を1ビットを稼ぐ](https://news.mynavi.jp/article/architecture-93/)が面白かった。

  今回の問題はjavascriptというよりは浮動小数点の問題なのでbashでも同じ。

  -----------------------------

  昔CSの授業で習った気もするけどすっかり忘れていたので今一度勉強できてよかった。
#+end_src

** 2021年に自分がemacs.dのカスタイマイズしたことについて

- slug: configure-emacs-in-2021
- date: 2021-12-03 15:11:22

#+begin_src markdown
  この記事は、[Emacs Advent Calendar 2021](https://qiita.com/advent-calendar/2021/emacs) 5日目の記事です。


  今年も[takeokunn/.emacs.d](https://github.com/takeokunn/.emacs.d) をかなり改造した。
  `git log --reverse` してみるとfirst commitが `Sat Nov 3 18:15:51 2018 +0900` のようなので3年使っているようだ。

  最初と比べて圧倒的に快適になってはいるものの、分からないことが増えていく一方である。
  とはいえ使っていくうちに理解が深まっていくのも事実。
  ざっくりやったことについて纏めていこうと思う。(去年やったことも含まれているかもしれないが御愛嬌)

  ,* emacs28にしてlibgccjitを動かした
    ,* defaultのcompilerをllvmからgccに変えるとスマホアプリ開発やら他の開発に影響が出るので動かしただけ
  ,* use-packageからleafへの移行した
    ,* caskを消した
    ,* 遅延ロードになったお陰で起動が高速になった
  ,* orgでinit.elを生成するようにした
    ,* [Makefile](https://github.com/takeokunn/.emacs.d/blob/master/Makefile) 参照
  ,* github pagesで見れるようにした
    ,* https://takeokunn.github.io/.emacs.d/
  ,* byte-compileをできる限りでするようにした
    ,* 多少のwarningは無視してる
  ,* ddskkを実用レベルでちゃんと使えるようにした
    ,* ddskkの設定は[dotfiles](https://github.com/takeokunn/dotfiles/blob/master/modules/skk/dot.skk) で管理してる
    ,* AZIKを完全にマスターした
  ,* company周りの設定が増えた
  ,* wanderlustで自分のgmailを操作できるようにした
    ,* しただけでちゃんと運用できてるわけではない
  ,* elfeedを充実させた
    ,* しただけでちゃんと運用できてるわけではない
  ,* magitを使いこなせるようになった
    ,* magit-forgeでgithubにpull requestを投げれるようにした
  ,* dap-modeを使えるようになった
    ,* なっただけ
  ,* yasnippetの設定が増えた
    ,* snippetをorgで管理するようにした
      ,* https://github.com/takeokunn/.emacs.d/blob/master/yasnippets.org
    ,* snippet自体も増えた
    ,* ivy-yasnippetで検索できるようにしてる
    ,* ついでに [AndreaCrotti/yasnippet-snippets](https://github.com/AndreaCrotti/yasnippet-snippets)にpull requestを投げたが音沙汰がない
      ,* https://github.com/AndreaCrotti/yasnippet-snippets/pull/434
      ,* https://github.com/AndreaCrotti/yasnippet-snippets/pull/433
  ,* tab-modeを使えるようになった
    ,* が、実用性あるのか....?ってなってる
  ,* fish scriptの開発環境が整った
    ,* [takeokunn/fish-repl.el](https://github.com/takeokunn/fish-repl.el) を作った
    ,* [takeokunn/ob-fish](https://github.com/takeokunn/ob-fish) を作った
  ,* org-modeの設定が増えた
    ,* 日常的なメモはorgで書くようになった
    ,* org-babelを使いこなせるようになった
    ,* 工数管理とか細かい使い方が未だに分らない
  ,* 英語の執筆環境が整った
    ,* flycheckとtextlintをちゃんと設定した
  ,* 言語ごとの開発環境を整えた
    ,* php, golang, solidity etc...
  ,* typescript reactはtreesitterとlspでなんとかするのが最適だと分かった
  ,* `M-x` の候補だがsmexからamxに変えたら欲しい候補が出るようになった

  ざくっと思い出せるのはこれくらいなのでまた何かあれば追記をしていこうと思う。
  来年はorg-modeを使いこなせるようになりたいなぁ
#+end_src
