:PROPERTIES:
:ID:       F534F5B0-C8E2-4E8C-BB0D-F83C14B0C490
:mtime:    20230625152400
:ctime:    20230624152703
:END:
#+TITLE: テキストエディタの限界とAIアシストの未来について
#+DESCRIPTION: description
#+DATE: 2023-06-24
#+HUGO_BASE_DIR: ../../
#+HUGO_SECTION: posts/permanent
#+HUGO_TAGS: permanent
#+HUGO_DRAFT: true
#+STARTUP: content
#+STARTUP: nohideblocks
* この文章を読むにあたっての注意

#+begin_example
  - 「テキストエディタ=Emacs」と考えてくれたら大丈夫です。
  - AIはChatGPTやLLMと読み替えてほしい
#+end_example

* Introduction

#+begin_example
  - 自分はテキストエディタガチ勢である
  - Emacsに対して多大なる時間を投資をしてきた
  - 投資対効果が年々悪くなっているという課題感がある
  - 打破する方法を模索している
#+end_example

* 長い3行

#+begin_example
  - 数十年単位の長期的な生産量を向上させたい
  - テキストエディタのカスタマイズに限界を感じてきている
  - AIを活用した強いワークフローを作り再帰的に強くなる方法を模索している
#+end_example

* 何をしたいのか

#+begin_example
  - 「生産性を向上させたい」と雑に言うのは簡単だが、いつの時点の生産性なんだろうかというのを考えなければならない。
  - 生産というのは「コードを生成すること」なのか「ユーザーに価値を提供すること」なのか定義があいまいなのだが、ここでは「目の前の問題（issueやチケット）を解決すること」として考える。
  - 日に15時間プログラミングするのと、日に1時間プログラミングするのでは当然後者の方が生産性は高いし、生産量は前者の方が高いだろう。生産量を追いかけるなら一日の労働時間を増やせば増やすほど良いが、それでは当然長続きしない。
  - 自分はこの記事を書いている現在、プログラマー歴10年弱の27歳なのだが、これ以外の仕事をできる気がしないので、どうせ20年後も30年後もプログラマーをやるんだろうなと感じている。
  - 本当に考えるべきは「プログラマー歴30年時点の累積生産量を最大化する」というのと「プログラマー歴30年時点なら今現在取り組んでいるタスクを1/n（n>1）で終わるくらいのスキルを有する必要がある」ということだ。
  - 安定的にパフォーマンスを出し続け、再帰的に強くなれるしくみを模索しなければならない。
#+end_example

* テキストエディタの限界とAI補完について

#+begin_example
  - テキストエディタとは文字通り「テキストを編集する」ことである。
  - ※マトリックスを書く
  - ※定型と精度について書く
  - 「〇〇というpluginを入れたら生産性が爆上がりした」という記事は無限にあるが、自分ぐらいの設定ファイル量がある人からしたら、そんなものは当然入っている or 検討した結果入れないという判断をした状態。
  - 改善の余地は年々減っており、「他人のEmacs.dを読み漁って1万行に数個有効な設定があるかどうかの中頑張って探す」「C-mだけじゃなくC-jにkeybindを割り当てたらカンマ数秒短縮する」という、「0.1パーセントの改善」ばかりすることになる。
  - 成長曲線はどんどん緩やかになっていき、投資対効果という意味では悪くなっていっている。
  - ※GitHub copilotが確信的だということを書く
#+end_example

* 全体のワークフローを目を向ける必要がある

#+begin_example
  - 趣味仕事問わず、開発とは単に目の前のプログラムを書くだけではない。他人とコミュニケーションを取ったり、issueを切ったり、メールを確認したり、PCを新調した時はデータ移行の必要があったりする。
  - 今後数十年エンジニアをやる前提で考えると、無視できない量になることは明白である。20年後戻うせ日報も週報を出すんです。
  - プログラムを書く時のことばかりに注力するのは局地的すぎる。
  - 自分が今何をしたいのか、過去に何をしたのか、それはどのくらい時間がかかったのか、などを明確にすることによって現状を理解する必要がある。
  - 自分が最近取り組んでいることを例として上げる。
#+end_example

** 例1 タスク管理フローについて
** 例2 設定ファイルについて
** 例3 通知をGmailに寄せてEmacsから見ている
* テキストエディタとAIとどう共存させるか

#+begin_example
  - AIの進化によって端折れる領域が増えているものの、結局は「入力値に対して出力する」というものにほかならない。
  - なので「適切な入力値を用意する速度をあげる」のと「過去のデータを学習しやすい形で蓄積する」「AIが出力しやすいような入力値の与え方について傾向を知る」というのが大事になってくる。
  - 「適切な入力値を用意する速度をあげる」のと「過去のデータを学習しやすい形で蓄積する」はタスク管理を徹底していればできる。
  - 「AIが出力しやすいような入力値」はAIとの対話の頻度を増やして経験的に傾向を知る以外方法がない。
  - 必ず将来的に手元で動くLLMが登場すると思っている。そのときまでに準備をしておかなければならない。
#+end_example

* 終わりに

- Emacsはタスク管理としてもテキストエディタとしてもメーラーとしても自分のやりたいことをすべて兼ね備えていますが、Emacsユーザー以外の人達はどうしていますか？
