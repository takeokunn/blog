:PROPERTIES:
:ID:       E6243AE2-CFE4-4D21-B9B7-E076B13CF486
:mtime:    20231224155012
:ctime:    20231219122351
:END:
#+TITLE: org-roamで記事を管理しGitHub Actionsで適切に公開する
#+AUTHOR: takeokunn
#+DESCRIPTION: description
#+DATE: 2023-12-19T12:31:50+0900
#+HUGO_BASE_DIR: ../../
#+HUGO_CATEGORIES: permanent
#+HUGO_SECTION: posts/permanent
#+HUGO_TAGS: emacs org-roam
#+HUGO_DRAFT: true
#+STARTUP: content
#+STARTUP: nohideblocks
* DONE Introduction
CLOSED: [2023-12-24 Sun 13:32]

2023念度Emacsアドベントカレンダーn日目です。
当記事ではorg-roamを用いたブログ記事のコンテンツ管理方法と、ZennやHugoへ公開する方法の一連の流れについて解説しています。

個々の技術への深堀は必要に応じて別途記事に認めますのでご了承ください。

* DONE 考え方
CLOSED: [2023-12-24 Sun 13:32]
** DONE ブログサービスについて
CLOSED: [2023-12-24 Sun 13:32]

[[https://zenn.dev/][Zenn]] や [[https://qiita.com/][Qiita]] などブログサービスを提供している会社は世の中に無数にありますが、「ブログ記事という形式で世の中に公開する」ということには大きく分けて以下の2つの要素があります。

- コンテンツ管理
- 記事公開

2000年代初期と2023年現在求められているブログサービスの必要条件は異なるように、年々求められる必要条件は増えています。
2023年においてSNSに投稿したものを埋め込むことができないブログサービスというのはほぼ存在しないように、有名なブログサービスに乗っかっておけばモダンな環境を常に享受し続けることができます。

しかしながら、ブログサービスにも当然栄枯盛衰があり自分が使っているサービスの行く末など個人には分かりようがありません。
現に私がプログラミングを初めた2014年ごろはQiitaが技術系ブログサービス一強だったが、2023年現在ではZennが主流になっています。
常により良いブログサービスが出たら移動することも念頭に置く必要があります。

私が勤めている会社では多少技術的な記事でも広報目的に[[https://note.com/][note]]に書くという運用がされていたり、以前所属していた会社では、[[https://hatenablog.com/][はてなブログ]]で技術ブログを運用していました。
ソフトウェアエンジニアとして働く以上「どこに対して記事公開するか」というのは自分ではコントロール効かないという前提があります。

上記で述べたように「記事公開」に関しては自分でどうしようもない部分が多々ありますが、「コンテンツ管理」に関しては完全に自分でコントロールを効かせることができます。
適切なフォーマットで公開すれば良いだけですので、どのように記事を管理されようとブログサービスからしたらDBのレコードの1つなだけなでどうでも良いことだと私は考えています。

** DONE ソフトウェアエンジニアとして
CLOSED: [2023-12-24 Sun 13:32]

ソフトウェアエンジニアにとって「技術的な文書を書く」という営みは避けられません。
「ドキュメントを書く」「チケットに証跡を書く」「同僚と技術的やりとりをする」等さまざまありますが、「ブログ記事を書く」という行為もそのひとつです。
特定の技術は廃れようと、20年後30年後も「技術的な文書を書く」という営みがなくなることはないでしょう。

私は残念ながらソフトウェアエンジニア以外の仕事が絶望的にできないので、10年後も20年後もソフトウェアエンジニアとして働いているだろうという感覚があります。
あまり文章を書くのが得意ではないので、いかに低負荷で一定の品質の文書を書く環境を用意するか、というのが自分のソフトウェアエンジニアとしての人生にとって重要なことだと考えてます。

** DONE すべてをEmacs org-modeに最適化する
CLOSED: [2023-12-24 Sun 13:32]

私は今までさまざまなテキストエディタを使い込んできました。
その中で一番時間をつぎ込んだ時に高みを目指せるのはEmacsだということを確信しました。

「simpleが良いか、easyが良いか」という議論はエンジニア界隈ではよく話題にされます。
私としては簡単さもシンプルさも本当にどうでもよく、たとえ難しかろうと複雑だろうと時間がかかろうと到達点が一番高いものが良いが一番良いと考えています。

今回の記事はorg-modeが主体になりますが、はっきり言ってorg-modeはsimpleでもeasyでもありません。
巷にある「爆速で構築する」系の記事とは正反対です。
初速は一切出ないですし、理解するまで時間がかかるし、運用が軌道に乗るまで本当に時間がかかります。
ただし、org-modeにはプログラマー人生すべてを寄せることができるくらいのポテンシャルがあり、運用に乗った時のパフォーマンスは計りしれません。

少なくとも直近10年は一切Emacsへの投資を惜しまないという覚悟をしているので執筆環境もEmacs org-modeに最適化をしていきます。
* DONE 要件
CLOSED: [2023-12-24 Sun 14:21]

自分はブログに対して何を求めているのか、ブログとはどうあるべきなのか、をあらためて整理してみました。
以下は個人ブログに対しての考え方ですので、複数人での運用に関しては特に考慮していません。

** DONE 必要条件
CLOSED: [2023-12-24 Sun 13:47]

[[https://www.gnu.org/software/emacs/manual/html_node/emacs/index.html][The Emacs Editor Manual]] や [[https://www.lispworks.com/documentation/HyperSpec/Front/][Common Lisp Hyperspec]] のような数十年前のWeb記事程度を満たしていれば良いだろうということを書いています。

*** DONE コンテンツ管理
CLOSED: [2023-12-24 Sun 13:47]

- 何がしかの方法で永続的に保存できる
- MarkdownやOrgのような人間が解釈しやすい形式で記述できる

コンテンツ管理の必要条件は最低限で、データベースやプレーンテキストで保存できれば要件を満たしていると考えています。
またHTMLをベタ書きするのは大ですので、MarkdownやOrgのような人間向きのフォーマットで最低限記述できるようにしたいと考えています。

*** DONE 記事公開
CLOSED: [2023-12-24 Sun 13:47]

- 意図したHyperTextを継続的に配信できる
- 画像やCSSも配信でき、最低限文章を読めるデザインで配信する

最低限Webサイトとしての体を成していれば良いと考えています。

** DONE 十分条件
CLOSED: [2023-12-24 Sun 14:21]

必要条件はあまりにも最低限すぎるので、2023年現在このくらいは最低限満たしたい条件を書いています。

*** DONE コンテンツ管理
CLOSED: [2023-12-24 Sun 14:08]

- MUST
  - 秘密鍵やパスワードが入っていないことを網羅的に検査できる
  - 校正ツールで継続的かつ網羅的に文章を検査できる
  - エディタの標準的な機能を使うことができる
- SHOULD
  - 執筆から公開フローが整っている
  - バージョン管理ができる
  - 下書きができる
  - 過去記事の検索性が優れている
- MAY
  - 複数のブログサービスにまたがって管理できる

個人でブログを書いているのもあり、誰かが校正してくれることがないので、うっかり不用意な記述やパスワードを公開しないようなしくみ作りが重要だと考えています。

*** DONE 記事公開
CLOSED: [2023-12-24 Sun 14:21]

- MUST
  - 文章を読みやすいWebデザインで提供する
  - Twitter埋め込みやYouTube動画埋め込みができる
  - メジャーなプログラミング言語のコードブロックをシンタックスハイライトできる
- SHOULD
  - 記事の公開/非公開を切り替えることができる
  - SEO対策
  - 関連記事を表示できる
  - OGPが表示できる
  - マイナーなプログラミング言語のコードブロックをシンタックスハイライトできる
- MAY
  - 任意のドメインで配信する
  - バックリンクを貼ることができる
  - SNSシェアボタンがある
  - ブログ内検索できる
  - 予約投稿できる

ブログ記事の公開先が不特定多数向けなのか特定少数向けなのかで要件は変わってきます。

* DONE 記事公開先
CLOSED: [2023-12-24 Sun 15:18]
** DONE 記事の属性
CLOSED: [2023-12-24 Sun 14:52]
私の場合、ブログ記事の属性として以下の4つを想定する必要があります。

- 所属会社の広報用記事
  - e.g. [[https://note.openlogi.com/n/nde050fa4ff2a?magazine_key=m9f98ae49ed2f][PHPConference 2023に登壇してきました - note]]
- 所属会社の技術記事
  - e.g. [[https://zenn.dev/openlogi/articles/bba928c9e07af3][PHPConf2023「保守性の高いアプリケーションを作り続けるための基盤整備について」というテーマで登壇します]]
- 個人の技術記事
  - e.g. [[id:C81D01DB-6135-46CD-B491-F35F42002417][PHP8から追加されたJITについて学ぼう!]]
- 個人の日記メモ
  - e.g. [[id:110B7369-0B49-48B4-9151-E39698DB0712][「PHP Lovers Meetup vol.0 ~ はじまりは<?phpから」に参加しました]]

上記の記事公開の十分要件を踏まえたざっくりとしたマトリックスは以下。

- ○ ... 必要
- △ ... どちらでも良い
- × ... 不要

|                    | 所属会社 広報用記事 | 所属会社 技術記事 | 個人 技術記事 | 個人 日記メモ |
|--------------------+------------------+----------------+-------------+-------------|
| Webデザイン          | ○                | ○              | △           | △           |
| SNS埋め込み          | ○                | ○              | △           | ○           |
| シンタックスハイライト | △                | ○              | ○           | △           |
| 記事の公開/非公開設定 | ○                | ○              | △           | △           |
| SEO対策             | ○                | ○              | △           | ×           |
| 関連記事             | ○                | ○              | △           | ×           |
| OGP表示             | ○                | ○              | △           | ×           |
| カスタムドメイン      | △                | △              | △           | ×           |
| バックリンク         | △                | △              | △           | △           |
| SNSシェア           | ○                | ○              | △           | ×           |
| ブログ内検索         | △                | △              | △           | ×           |
| 予約投稿             | ○                | ○              | ×           | ×           |

所属企業のブログ記事は広報的な意味も兼ねており、業務時間を使って仕事として書いている側面もあるので、高い要件を満たす必要があります。
モダンはブログサービスを使えばこのあたりの要件をすべてフルマネージドで満たしてくれているので、個人として特に何も対応する必要はありません。

個人としてのブログ記事は求められる要件は非常に少なく好き勝手作ることができます。
好きなデザインテーマを使い、好きなライブラリを選定し、自分好みにブログサービスを作成しても問題がないのです。

** DONE ブログサービスとセルフホスティング
CLOSED: [2023-12-24 Sun 15:18]

基本的には既存のブログサービスの品質は非常に高いのでセルフホスティングするメリットはほぼありません。
はっきり言ってセルフホスティングは何か目的がない限りは時間の無駄であり、あまりお勧めできるようなものではありません。

Webデザインに特別こだわりがあったり、Webサイトを学習目的で作成したり、既存のブログサービスでは実現できないことをやりたい等がない限り、一切やる必要がないです。
私の場合、Webエンジニアとしてのスキルアップの為に作成している面が非常に大きく、既存のブログサービスにどこまで近付けるのか、静的サイトジェネレータのポテンシャルを検証する目的で作成しています。

ブログサービスとセルフホスティングの差はいろいろありますが、一番の差はSEO対策です。
サイト内のコンテンツ数はブログサービスに勝つことは個人ではほぼ不可能です。
不特定多数に見てもらいたいものはブログサービス、特定少数に見てもらいたいものはセルフホスティング先に公開するという運用をしています。

* DONE 全体の流れ
CLOSED: [2023-12-24 Sun 15:49]

[[file:../../static/images/06C3BC2E-F1DD-4FAE-954B-CC8459ED46B7.png]]

#+begin_src mermaid
  graph LR
      A[Emacs] --> |push| B[Repo]
      B --> |run CI| C[Linter]
      subgraph GitHub Actions
      C --> D[Export]
      end
      D --> |publish| E[Hugo]
      D --> |publish| F[Zenn]
#+end_src

1. Localで記事を編集する
2. [[https://github.com/takeokunn/blog][takeokunn/blog]] のmain branchにpushする
3. GitHub Actions上で[[https://github.com/textlint/textlint][textlint]]と[[https://github.com/secretlint/secretlint][secretlint]]を実行する
4. 各公開先用に[[https://orgmode.org/guide/Exporting.html][org-export]]して指定の処理をする

個別の配信方法や設定方法は後述しますが、巷によくあるCI/CDの流れを踏襲しています。
分量の多い記事に関しては適宜Pull Requestに切り出して執筆していく運用にしています。

* コンテンツ管理
** org-roam
** yasnippet
** .dir-locals2.el
** textlint
** secretlint
* Publish
** Hugo
*** Hosting
*** Theme
*** Backlink
*** OGP
** Zenn
*** ox-zenn
*** GitHub連携
* GitHub Actions
* 今後の展望
