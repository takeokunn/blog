:PROPERTIES:
:ID:       1409951D-E05B-4DEB-9388-1B6A2185A29B
:mtime:    20221216002311 20221215031535
:ctime:    20221215031447
:END:

#+TITLE: TwitterUIDの挙動とJavaScriptのBigIntについて
#+DESCRIPTION: TwitterUIDの挙動とJavaScriptのBigIntについて
#+DATE: 2020-10-28
#+HUGO_BASE_DIR: ../../
#+HUGO_SECTION: posts/permanent
#+HUGO_TAGS: permanent javascript twitter
#+HUGO_DRAFT: false
#+STARTUP: content
#+STARTUP: nohideblocks

TwitterのUIDについて調べてたら、自分の浮動小数点の挙動についての理解度が低かったので調べたことについて纏めておく。

--------------

事の発端は、spreadsheet上の人力で管理されているTwitterのユーザ情報をデータベースに入れる作業をしていた時だった。

以前同じような作業をしたとき結構漏れがあったので、Twitter UIDの妥当性やscreen nameが本当に存在するかどうかを確認する必要があった。

[[https://idtwi.com/][TwitterのIDチェッカー]]などのwebサイトを利用してもよかったが、100件を超える量のデータを手動で確認取るのは面倒だったため、以下のような検証scriptを雑に書いた。

#+begin_src shell
  #!/bin/bash
  while read row; do
      TWITTER_ID=`echo ${row} | cut -d , -f 1`
      TWITTER_UID=`echo ${row} | cut -d , -f 2`
      TWITTER_REQUEST_UID=`curl -X GET -H "Authorization: Bearer <TWITTER_TOKEN>" -s "https://api.twitter.com/1.1/users/show.json?screen_name=${TWITTER_ID}" | jq ".id"`
      if [ ${TWITTER_REQUEST_UID} -ne ${TWITTER_UID} ]; then
          echo "${TWITTER_ID}: ${TWITTER_UID} → ${TWITTER_REQUEST_UID}"
      fi
  done < ~/Desktop/twitter.csv
#+end_src

そうしたら半分くらいのTwitter UIDがずれてしまった。明らかにおかしいと思ったので、きちんと調査することにした。

--------------

Twitter Developer Documentに ~Twitter IDs~ という記事がある。

[[https://developer.twitter.com/en/docs/twitter-ids]]

以下のようなことが書かれていた。

- ユーザの増加によりTwitterのUIDは64bit
- unsignedでuniqueな値として管理されている
- JavaScriptの整数のサイズは53bitに制限されている
- api responseでは整数(~id~)と文字列(~id_str~)の両方を返すような実装になっている

ここから分かるのは、自分は↑のshell scriptで ~id~ を見ていたから正しい値をとれていなかった、~id_str~ を使うべきだったことがわかる。

確かに、以下のように =toString()= をしたらずれることについて確認がとれたがどうしてだろうか。
また、今回はbash scriptを書いたのにJavaScriptと同じ挙動をするのはどうしてなのか調べる必要がある。


#+begin_src shell
  ~ ｡+ﾟ(∩´﹏'∩)ﾟ+｡ < node
  Welcome to Node.js v15.0.1.
  Type ".help" for more information.
  > (10765432100123456789).toString()
  '10765432100123458000'
#+end_src

--------------

JavaScriptの数値については [[https://qiita.com/uhyo/items/f9abb94bcc0374d7ed23][JavaScriptの数値型完全理解]]が一番良く纏まっていた。

これによると、JavaScriptの数値型は全て ~IEEE 754~ 倍精度の浮動小数点(double型)で表現されている。確かに、[[https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Number][MDNのNumberの記事]]にも同じような記述がある。

double型で安全に表現できる最大値は ~Number.MAX_SAFE_INTEGER~ で取ることができ、 ~Number.isSafeInteger()~ などでもチェックできる。

#+begin_src shell
  > Number.isSafeInteger(10765432100123456789)
  false
  > Number.MAX_SAFE_INTEGER
  9007199254740991
#+end_src

ただこれではなにかと不都合なので、JavaScriptには ~bigint~ も用意されている。

MDNには以下のように書かれているので日常使いするのは辞めておくべきだろう。

#+begin_quote
Number と BigInt との間の型変換は精度が落ちる可能性があるため、 BigInt
は値が論理的に253以上になる場合にのみ使用し、この2つの型の間で型変換を行わないこと推奨します。

#+end_quote

[[https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/BigInt]]

先程の巨大な値でも正確に出力できる。

#+begin_src shell
  > (10765432100123456789n).toString()
  '10765432100123456789'
#+end_src

[[https://caniuse.com/bigint][caniuse]]を見てるとほとんどのブラウザがBigIntに対応されているので問題なく使えるみたいだ。

--------------

浮動小数点にの挙動についてもう少し見てみる。

ググったらいっぱい出てくるので計算方法は割愛するが、[[https://www.cc.kyoto-su.ac.jp/~yamada/programming/float.html][浮動小数点数型と誤差]]に分かり易くまとまっている。

#+begin_example
double の表す値　＝　(-1)^符号部 × 2^(指数部-1023) × 1.仮数部
#+end_example

#+caption: double
[[https://www.cc.kyoto-su.ac.jp/~yamada/programming/double.png]]

- 符号は、0なら正、1なら負
- 指数部は、「2^指数」の指数の部分に1023を引いたものが11bit符号無しの整数の形で格納されている
- 仮数部は、実際の仮数部の先頭の「1」を取り除いた残りが格納されている

という風に格納される。

仮数部が52bitだが、double型の精度が53bitなのは =1.仮数部= の =1=
部分もカウントされるからみたいだ。

[[https://news.mynavi.jp/article/architecture-93/][ヒドン(Hidden)ビットで精度を1ビットを稼ぐ]]が面白かった。

今回の問題はJavaScriptというよりは浮動小数点の問題なのでbashでも同じ。

-------

昔CSの授業で習った気もするけどすっかり忘れていたので今一度勉強できてよかった。
