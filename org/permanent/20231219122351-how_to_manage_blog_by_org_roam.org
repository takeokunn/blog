:PROPERTIES:
:ID:       E6243AE2-CFE4-4D21-B9B7-E076B13CF486
:mtime:    20231224165403
:ctime:    20231219122351
:END:
#+TITLE: org-roamで記事を管理しGitHub Actionsで適切に公開する
#+AUTHOR: takeokunn
#+DESCRIPTION: description
#+DATE: 2023-12-19T12:31:50+0900
#+HUGO_BASE_DIR: ../../
#+HUGO_CATEGORIES: permanent
#+HUGO_SECTION: posts/permanent
#+HUGO_TAGS: emacs org-roam
#+HUGO_DRAFT: true
#+STARTUP: content
#+STARTUP: nohideblocks
* DONE Introduction
CLOSED: [2023-12-24 Sun 13:32]

2023念度Emacsアドベントカレンダーn日目です。
当記事ではorg-roamを用いたブログ記事のコンテンツ管理方法と、ZennやHugoへ公開する方法の一連の流れについて解説しています。

個々の技術への深堀は必要に応じて別途記事に認めますのでご了承ください。

* DONE 考え方
CLOSED: [2023-12-24 Sun 13:32]
** DONE ブログサービスについて
CLOSED: [2023-12-24 Sun 13:32]

[[https://zenn.dev/][Zenn]] や [[https://qiita.com/][Qiita]] などブログサービスを提供している会社は世の中に無数にありますが、「ブログ記事という形式で世の中に公開する」ということには大きく分けて以下の2つの要素があります。

- コンテンツ管理
- 記事公開

2000年代初期と2023年現在求められているブログサービスの必要条件は異なるように、年々求められる必要条件は増えています。
2023年においてSNSに投稿したものを埋め込むことができないブログサービスというのはほぼ存在しないように、有名なブログサービスに乗っかっておけばモダンな環境を常に享受し続けることができます。

しかしながら、ブログサービスにも当然栄枯盛衰があり自分が使っているサービスの行く末など個人には分かりようがありません。
現に私がプログラミングを初めた2014年ごろはQiitaが技術系ブログサービス一強だったが、2023年現在ではZennが主流になっています。
常により良いブログサービスが出たら移動することも念頭に置く必要があります。

私が勤めている会社では多少技術的な記事でも広報目的に[[https://note.com/][note]]に書くという運用がされていたり、以前所属していた会社では、[[https://hatenablog.com/][はてなブログ]]で技術ブログを運用していました。
ソフトウェアエンジニアとして働く以上「どこに対して記事公開するか」というのは自分ではコントロール効かないという前提があります。

上記で述べたように「記事公開」に関しては自分でどうしようもない部分が多々ありますが、「コンテンツ管理」に関しては完全に自分でコントロールを効かせることができます。
適切なフォーマットで公開すれば良いだけですので、どのように記事を管理されようとブログサービスからしたらDBのレコードの1つなだけなでどうでも良いことだと私は考えています。

** DONE ソフトウェアエンジニアとして
CLOSED: [2023-12-24 Sun 13:32]

ソフトウェアエンジニアにとって「技術的な文書を書く」という営みは避けられません。
「ドキュメントを書く」「チケットに証跡を書く」「同僚と技術的やりとりをする」等さまざまありますが、「ブログ記事を書く」という行為もそのひとつです。
特定の技術は廃れようと、20年後30年後も「技術的な文書を書く」という営みがなくなることはないでしょう。

私は残念ながらソフトウェアエンジニア以外の仕事が絶望的にできないので、10年後も20年後もソフトウェアエンジニアとして働いているだろうという感覚があります。
あまり文章を書くのが得意ではないので、いかに低負荷で一定の品質の文書を書く環境を用意するか、というのが自分のソフトウェアエンジニアとしての人生にとって重要なことだと考えてます。

** DONE すべてをEmacs org-modeに最適化する
CLOSED: [2023-12-24 Sun 13:32]

私は今までさまざまなテキストエディタを使い込んできました。
その中で一番時間をつぎ込んだ時に高みを目指せるのはEmacsだということを確信しました。

「simpleが良いか、easyが良いか」という議論はエンジニア界隈ではよく話題にされます。
私としては簡単さもシンプルさも本当にどうでもよく、たとえ難しかろうと複雑だろうと時間がかかろうと到達点が一番高いものが良いが一番良いと考えています。

今回の記事はorg-modeが主体になりますが、はっきり言ってorg-modeはsimpleでもeasyでもありません。
巷にある「爆速で構築する」系の記事とは正反対です。
初速は一切出ないですし、理解するまで時間がかかるし、運用が軌道に乗るまで本当に時間がかかります。
ただし、org-modeにはプログラマー人生すべてを寄せることができるくらいのポテンシャルがあり、運用に乗った時のパフォーマンスは計りしれません。

少なくとも直近10年は一切Emacsへの投資を惜しまないという覚悟をしているので執筆環境もEmacs org-modeに最適化をしていきます。
* DONE 要件
CLOSED: [2023-12-24 Sun 14:21]

自分はブログに対して何を求めているのか、ブログとはどうあるべきなのか、をあらためて整理してみました。
以下は個人ブログに対しての考え方ですので、複数人での運用に関しては特に考慮していません。

** DONE 必要条件
CLOSED: [2023-12-24 Sun 13:47]

[[https://www.gnu.org/software/emacs/manual/html_node/emacs/index.html][The Emacs Editor Manual]] や [[https://www.lispworks.com/documentation/HyperSpec/Front/][Common Lisp Hyperspec]] のような数十年前のWeb記事程度を満たしていれば良いだろうということを書いています。

*** DONE コンテンツ管理
CLOSED: [2023-12-24 Sun 13:47]

- 何がしかの方法で永続的に保存できる
- MarkdownやOrgのような人間が解釈しやすい形式で記述できる

コンテンツ管理の必要条件は最低限で、データベースやプレーンテキストで保存できれば要件を満たしていると考えています。
またHTMLをベタ書きするのは大ですので、MarkdownやOrgのような人間向きのフォーマットで最低限記述できるようにしたいと考えています。

*** DONE 記事公開
CLOSED: [2023-12-24 Sun 13:47]

- 意図したHyperTextを継続的に配信できる
- 画像やCSSも配信でき、最低限文章を読めるデザインで配信する

最低限Webサイトとしての体を成していれば良いと考えています。

** DONE 十分条件
CLOSED: [2023-12-24 Sun 14:21]

必要条件はあまりにも最低限すぎるので、2023年現在このくらいは最低限満たしたい条件を書いています。

*** DONE コンテンツ管理
CLOSED: [2023-12-24 Sun 14:08]

- MUST
  - 秘密鍵やパスワードが入っていないことを網羅的に検査できる
  - 校正ツールで継続的かつ網羅的に文章を検査できる
  - エディタの標準的な機能を使うことができる
- SHOULD
  - 執筆から公開フローが整っている
  - バージョン管理ができる
  - 下書きができる
  - 過去記事の検索性が優れている
- MAY
  - 複数のブログサービスにまたがって管理できる

個人でブログを書いているのもあり、誰かが校正してくれることがないので、うっかり不用意な記述やパスワードを公開しないようなしくみ作りが重要だと考えています。

*** DONE 記事公開
CLOSED: [2023-12-24 Sun 14:21]

- MUST
  - 文章を読みやすいWebデザインで提供する
  - Twitter埋め込みやYouTube動画埋め込みができる
  - メジャーなプログラミング言語のコードブロックをシンタックスハイライトできる
- SHOULD
  - 記事の公開/非公開を切り替えることができる
  - SEO対策
  - 関連記事を表示できる
  - OGPが表示できる
  - マイナーなプログラミング言語のコードブロックをシンタックスハイライトできる
- MAY
  - 任意のドメインで配信する
  - バックリンクを貼ることができる
  - SNSシェアボタンがある
  - ブログ内検索できる
  - 予約投稿できる

ブログ記事の公開先が不特定多数向けなのか特定少数向けなのかで要件は変わってきます。

* DONE 記事公開先
CLOSED: [2023-12-24 Sun 15:18]
** DONE 記事の属性
CLOSED: [2023-12-24 Sun 14:52]
私の場合、ブログ記事の属性として以下の4つを想定する必要があります。

- 所属会社の広報用記事
  - e.g. [[https://note.openlogi.com/n/nde050fa4ff2a?magazine_key=m9f98ae49ed2f][PHPConference 2023に登壇してきました - note]]
- 所属会社の技術記事
  - e.g. [[https://zenn.dev/openlogi/articles/bba928c9e07af3][PHPConf2023「保守性の高いアプリケーションを作り続けるための基盤整備について」というテーマで登壇します]]
- 個人の技術記事
  - e.g. [[id:C81D01DB-6135-46CD-B491-F35F42002417][PHP8から追加されたJITについて学ぼう!]]
- 個人の日記メモ
  - e.g. [[id:110B7369-0B49-48B4-9151-E39698DB0712][「PHP Lovers Meetup vol.0 ~ はじまりは<?phpから」に参加しました]]

上記の記事公開の十分要件を踏まえたざっくりとしたマトリックスは以下。

- ○ ... 必要
- △ ... どちらでも良い
- × ... 不要

|                    | 所属会社 広報用記事 | 所属会社 技術記事 | 個人 技術記事 | 個人 日記メモ |
|--------------------+------------------+----------------+-------------+-------------|
| Webデザイン          | ○                | ○              | △           | △           |
| SNS埋め込み          | ○                | ○              | △           | ○           |
| シンタックスハイライト | △                | ○              | ○           | △           |
| 記事の公開/非公開設定 | ○                | ○              | △           | △           |
| SEO対策             | ○                | ○              | △           | ×           |
| 関連記事             | ○                | ○              | △           | ×           |
| OGP表示             | ○                | ○              | △           | ×           |
| カスタムドメイン      | △                | △              | △           | ×           |
| バックリンク         | △                | △              | △           | △           |
| SNSシェア           | ○                | ○              | △           | ×           |
| ブログ内検索         | △                | △              | △           | ×           |
| 予約投稿             | ○                | ○              | ×           | ×           |

所属企業のブログ記事は広報的な意味も兼ねており、業務時間を使って仕事として書いている側面もあるので、高い要件を満たす必要があります。
モダンはブログサービスを使えばこのあたりの要件をすべてフルマネージドで満たしてくれているので、個人として特に何も対応する必要はありません。

個人としてのブログ記事は求められる要件は非常に少なく好き勝手作ることができます。
好きなデザインテーマを使い、好きなライブラリを選定し、自分好みにブログサービスを作成しても問題がないのです。

所属企業のブログ記事はどちらかというと一枚絵のようなものであまり気軽に文章を変更してはいけないが、個人のブログ記事は気軽に文章を変更することが可能という視点もあります。

** DONE ブログサービスとセルフホスティング
CLOSED: [2023-12-24 Sun 15:18]

基本的には既存のブログサービスの品質は非常に高いのでセルフホスティングするメリットはほぼありません。
はっきり言ってセルフホスティングは何か目的がない限りは時間の無駄であり、あまりお勧めできるようなものではありません。

Webデザインに特別こだわりがあったり、Webサイトを学習目的で作成したり、既存のブログサービスでは実現できないことをやりたい等がない限り、一切やる必要がないです。
私の場合、Webエンジニアとしてのスキルアップの為に作成している面が非常に大きく、既存のブログサービスにどこまで近付けるのか、静的サイトジェネレータのポテンシャルを検証する目的で作成しています。

ブログサービスとセルフホスティングの差はいろいろありますが、一番の差はSEO対策です。
サイト内のコンテンツ数はブログサービスに勝つことは個人ではほぼ不可能です。
不特定多数に見てもらいたいものはブログサービス、特定少数に見てもらいたいものはセルフホスティング先に公開するという運用をしています。

* DONE 全体の流れ
CLOSED: [2023-12-24 Sun 15:49]
** DONE Workflow
CLOSED: [2023-12-24 Sun 15:52]

[[file:../../static/images/06C3BC2E-F1DD-4FAE-954B-CC8459ED46B7.png]]

#+begin_src mermaid :file (expand-file-name "~/.ghq/github.com/takeokunn/blog/static/images/06C3BC2E-F1DD-4FAE-954B-CC8459ED46B7.png")
  graph LR
      A[Emacs] --> |push| B[Repo]
      B --> |run CI| C[Linter]
      subgraph GitHub Actions
      C --> D[Export]
      end
      D --> |publish| E[Hugo]
      D --> |publish| F[Zenn]
#+end_src

#+RESULTS:
[[file:/Users/obara/.ghq/github.com/takeokunn/blog/static/images/06C3BC2E-F1DD-4FAE-954B-CC8459ED46B7.png]]

1. Localで記事を編集する
2. [[https://github.com/takeokunn/blog][takeokunn/blog]] のmain branchにpushする
3. GitHub Actions上で[[https://github.com/textlint/textlint][textlint]]と[[https://github.com/secretlint/secretlint][secretlint]]を実行する
4. 各公開先用に[[https://orgmode.org/guide/Exporting.html][org-export]]して指定の処理をする

個別の配信方法や設定方法は後述しますが、巷によくあるCI/CDの流れを踏襲しています。
分量の多い記事に関しては適宜Pull Requestに切り出して執筆していく運用にしています。
** DONE Zettelkasten
CLOSED: [2023-12-24 Sun 16:11]

ソフトウェア開発は業界が未成熟な面と日進月歩で進化して続けているという二面があり、知識が陳腐化しやすいという性質を持っています。
長期的にコンテンツ管理をするという前提で、継続的に知見をアップデートをするにあたってどう管理運用をしていけば良いのかを考慮する必要があります。

検討した結果Zettelkastenを採用することにしました。
[[https://gigazine.net/news/20200604-zettelkasten-note/][効率的なノートを作成できるドイツの社会学者が生み出した方法「Zettelkasten」とは？ - gigazine]] にもある通り、小さな知識を相互にリンクさせることによって巨大な知識体系を作ることができます。

Zettelkastenについて日本語で解説した記事はあまりなく、どう運用すれば良いのか非常に悩みました。

jMatsuzaki氏のZettelkasten関連が一番参考になったのでメモしておきます。
[[https://jmatsuzaki.com/archives/category/lifestyle/zettelkasten][https://jmatsuzaki.com/archives/category/lifestyle/zettelkasten]]

またorg-roamのドキュメントにも簡単に書いてあるので目を通すことをお勧めします。
https://www.orgroam.com/manual.html#A-Brief-Introduction-to-the-Zettelkasten-Method

* コンテンツ管理
** TODO org-roam
*** DONE Basic
CLOSED: [2023-12-24 Sun 16:21]
[[https://www.orgroam.com/][org-roam]] はorg-modeのキラーアプリケーションの1つです。
ベースはorg-modeで記述でき、org file間の移動や参照やリンクをスムーズに行うことができるパッケージです。
org file間の関係性をSQLiteで管理していて、グラフィカルに表示できます。

「org-roamを使ってみた」といった記事は複数あるが、実際に長期的に運用してみた記事はあまりないのでどう運用するのか非常に悩みました。
[[https://futurismo.biz/using-org-roam-one-year-2022/][🖊知的生産のキラーアプリOrg-roamを１年使い倒し学ぶとはなにか考えたポエム(2022)]] が日本語の記事の中では一番しっかりと書かれており、非常に参考にさせてもらいました。

私の運用は完全にZettelkastenに寄せている訳ではなく、org-roamを使いなるべく運用を寄せているだけですので、理想的なZettelkastenではないことをご了承ください。
*** DONE ディレクトリ構成
CLOSED: [2023-12-24 Sun 16:33]

[[https://jmatsuzaki.com/archives/28172][Zettelkasten（ツェッテルカステン）で使うノートの種類と構成まとめ - jMatsuzaki]] によると、以下のようなディレクトリ構成にすることが推奨されているようです。

- 一時メモ
  - Fleeting Notes
- 文献ノート
  - Literature Notes
- Zettelkasten本体
  - Permanent Notes
  - Structure Notes
  - Index Notes
- プロジェクト管理
  - Project Notes

私は以下のようなディレクトリ構成で運用しています。

- org
  - fleeting/ 技術的なメモ
  - permanent/ ちゃんとした記事
  - diary/ イベント参加記
  - private/ gpgで暗号化した下書き記事
  - zenn/ Zennに出力する記事

現状あまり実践できていないですが、なるべく普段からfleetingにメモを取り、形になったタイミングでpermanenteやzennに記事を書くという運用を目指しています。

*** TODO 設定方法
この記事を読むような奇特な人は自分でorg-roamのインストールをできるはずなので詳細には書きません。[[https://github.com/org-roam/org-roam?tab=readme-ov-file#installation][README]]を参考に導入してください。
私はどちらかというとEmacsの設定に関して几帳面なので各Elisp fileごとにsetqをする運用をしています。

以下の設定は [[https://github.com/org-roam/org-roam][org-roam/org-roam]] 内の設定のみですが、[[https://github.com/org-roam/org-roam-ui][org-roam/org-roam-ui]]や[[https://github.com/tefkah/org-roam-timestamps][tefkah/org-roam-timestamps]]も導入することをお勧めします。
**** org-roam
org-roamは [[https://github.com/takeokunn/blog][takeokunn/blog]] のみで使っているので、以下のように設定しています。
個人的にはリポジトリ管理は [[https://github.com/x-motemen/ghq][x-motemen/ghq]] を使うことを推奨しています。

#+begin_src emacs-lisp
  (with-eval-after-load 'org-roam
    (setq org-roam-directory `,(concat (s-trim-right (shell-command-to-string "ghq root"))
                                       "/github.com/takeokunn/blog")))
#+end_src
**** org-roam-node

=org-roam-node-find= と =org-roam-node-insert= はorg-roamを使うにあたって一番使うコマンドと言っても過言ではありません。
=org-roam-completion-everywhere= を有効にすると補完が効いてくれるようになるが、 =org-roam-node-insert= で明示的にリンクを入力すれば良いだけなので好みで有効にしてください。

#+begin_src emacs-lisp
  (autoload-if-found '(org-roam-node-find org-roam-node-insert) "org-roam-node" nil t)
  (global-set-key (kbd "C-c n f") #'org-roam-node-find)
  (global-set-key (kbd "C-c n i") #'org-roam-node-insert)

  (with-eval-after-load 'org-roam-node
    (setq org-roam-completion-everywhere t))
#+end_src
**** org-roam-db
=org-roam-db-autosync-enable= を有効にすることによって、非同期で =org-roam.db= を更新してくれるようです。

=org-roam-db-gc-threshold= はドキュメントを読んでいると多めに設定しておいても良いだろうということで多めに設定してます。
https://www.orgroam.com/manual.html#Garbage-Collection

#+begin_src emacs-lisp
  (autoload-if-found '(org-roam-db-autosync-enable) "org-roam-db" nil t)
  (org-roam-db-autosync-enable)

  (with-eval-after-load 'org-roam-db
    (setq org-roam-database-connector 'sqlite)
    (setq org-roam-db-gc-threshold (* 4 gc-cons-threshold)))
#+end_src
**** org-roam-capture

新規に記事を作成する時は =org-roam-capture= 経由で作成しています。
それぞれのディレクトリごとにファイル名を自動生成して作成できるように設定しています。

#+begin_src emacs-lisp
  (autoload-if-found '(org-roam-capture) "org-roam-capture" nil t)
  (global-set-key (kbd "C-c n c") #'org-roam-capture)

  (with-eval-after-load 'org-roam-capture
    (setq org-roam-capture-templates '(("f" "Fleeting(一時メモ)" plain "%?"
                                        :target (file+head "org/fleeting/%<%Y%m%d%H%M%S>-${slug}.org" "#+TITLE: ${title}\n")
                                        :unnarrowed t)
                                       ("l" "Literature(文献)" plain "%?"
                                        :target (file+head "org/literature/%<%Y%m%d%H%M%S>-${slug}.org" "#+TITLE: ${title}\n")
                                        :unnarrowed t)
                                       ("p" "Permanent(記事)" plain "%?"
                                        :target (file+head "org/permanent/%<%Y%m%d%H%M%S>-${slug}.org" "#+TITLE: ${title}\n")
                                        :unnarrowed t)
                                       ("d" "Diary(日記)" plain "%?"
                                        :target (file+head "org/diary/%<%Y%m%d%H%M%S>-${slug}.org" "#+TITLE: ${title}\n")
                                        :unnarrowed t)
                                       ("z" "Zenn" plain "%?"
                                        :target (file+head "org/zenn/%<%Y%m%d%H%M%S>.org" "#+TITLE: ${title}\n")
                                        :unnarrowed t)
                                       ("m" "Private" plain "%?"
                                        :target (file+head "org/private/%<%Y%m%d%H%M%S>.org.gpg" "#+TITLE: ${title}\n")
                                        :unnarrowed t))))
#+end_src
*** yasnippet
** textlint
** secretlint
* Publish
** Hugo
*** Hosting
*** Theme
*** Backlink
*** OGP
*** 画像
** Zenn
*** ox-zenn
*** GitHub連携
* GitHub Actions
* 今後の展望
