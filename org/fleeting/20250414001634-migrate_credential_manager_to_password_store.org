:PROPERTIES:
:ID:       8A0AAFA0-0FDA-4C4C-BDC3-8279A68CE44C
:END:
#+TITLE: credential管理をorg-encryptからpassword-storeに移行した
#+AUTHOR: takeokunn
#+DESCRIPTION: description
#+DATE: 2025-04-14T00:16:38+0900
#+HUGO_BASE_DIR: ../../
#+HUGO_CATEGORIES: fleeting
#+HUGO_SECTION: posts/fleeting
#+HUGO_TAGS: fleeting org-mode password-store
#+HUGO_DRAFT: false
#+STARTUP: content
#+STARTUP: fold
* Introduction
* 現状の運用と問題

[[id:C5A797A4-C474-4CFE-96E8-22C12F609A80][org-crypt運用メモ]] に書いたとおり、 =~/.aws/credentials= のような秘匿情報を =secret.org= を =org-babel-tangle= して出力していた。

次のように =org-decrypt-entries= と =org-encrypt-entries= をadviceして対応していたのだが、[[https://github.com/AntonHakansson/org-nix-shell][org-nix-shell]] がうまく動かなくなってしまった。

#+begin_src emacs-lisp
  (advice-add 'org-babel-tangle :before #'org-decrypt-entries)
  (advice-add 'org-babel-tangle :after #'org-encrypt-entries)
#+end_src

[[https://github.com/astahlman/ob-async][ob-async]] を有効にした時も[[https://github.com/AntonHakansson/org-nix-shell][org-nix-shell]]が実行できなくなってしまったので、 =advice-add= をすると問題が起きるのかもしれない。（要検証）
[[id:8D7E7EC3-12EE-49DF-9134-8BFA085CC11D][org-nix-shell入門]] にも書いたが、[[https://github.com/AntonHakansson/org-nix-shell][org-nix-shell]]はキラーアプリケーションなので消す訳にはいかない。

=M-x org-encrypt-entries= を手動で実行する運用にしていたが、うっかり叩き忘れたままcommitを何度かしてしまった。

[[https://github.com/newren/git-filter-repo][newren/git-filter-repo]]などを使ってcommit hisotryから消したが面倒だった。

また、[[id:653CAD86-42DF-4987-9642-D5179B90CA97][mcp-servers-nixを導入した]]時点では実装されてなかったが、[[https://github.com/natsukium/mcp-servers-nix][mcp-servers-nix]] は =passwordCommand= をサポートしてくれた。
よい機会なのでpassword-store管理に移行にすることにした。

* 作業手順
** 1. 既存のorg-encryptしてた鍵情報をpassword-store管理下に移行

次のように秘密鍵をpassコマンドで検索できるようにする。

#+begin_src console
  pass show gemini/private
#+end_src
** 2. org-babel templateを作成

passコマンドをwrapするコマンドを用意する。

#+begin_src org
  ,#+name: pass
  ,#+begin_src emacs-lisp :var id="" :results value raw
    (string-trim (shell-command-to-string (format "pass show %s" id)))
  ,#+end_src
#+end_src
** 3. 各秘密鍵に埋め込み

=:noweb yes= で関数を実行できるようにする。
=M-x org-babel-tangle= を実行すると、秘密鍵の入った状態で =~/.aider.conf.yml= が出力される。

#+begin_src org
  ,** ~/.aider.conf.yml
  ,#+begin_src yaml :tangle (expand-file-name "~/.aider.conf.yml") :mkdirp yes :noweb yes
    dark-mode: true
    model: gemini
    api-key:
      - gemini=<<pass(id='gemini/private')>>
  ,#+end_src
#+end_src

* 終わりに
外部コマンドを叩いてる関係で多少tangleに時間がかかるようになってしまったが許容できる範囲内。
長年秘密鍵の管理方法について悩んでたけど方針が決まってよかった。
